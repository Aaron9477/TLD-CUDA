!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	391;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	394;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	397;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	403;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	405;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	409;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	412;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	415;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	420;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	423;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	426;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	430;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	396;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	399;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	402;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	406;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	408;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	410;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	414;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	417;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	420;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	428;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	435;"	d	file:
ASSIGN_LABEL	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline void ASSIGN_LABEL( CvPoint p, t_labelType *labels, int imageWidth, int newLabel )$/;"	f
ASSIGN_VISITED	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline void ASSIGN_VISITED( CvPoint p, bool *visitedPoints, int imageWidth  )$/;"	f
AddBlob	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::AddBlob( CBlob *blob )$/;"	f	class:CBlobResult
AddChainCode	.\src\3rdparty\cvblobs\BlobContour.cpp	/^void CBlobContour::AddChainCode(t_chainCode chaincode)$/;"	f	class:CBlobContour
AddInternalContour	.\src\3rdparty\cvblobs\blob.cpp	/^void CBlob::AddInternalContour( const CBlobContour &newContour )$/;"	f	class:CBlob
Area	.\src\3rdparty\cvblobs\blob.cpp	/^double CBlob::Area()$/;"	f	class:CBlob
BBPREDICT_H_	.\src\libopentld\mftracker\BBPredict.h	29;"	d
BB_H_	.\src\libopentld\mftracker\BB.h	29;"	d
BEGIN	.\src\3rdparty\libconfig\scanner.c	143;"	d	file:
BLOBCONTOUR_H_INCLUDED	.\src\3rdparty\cvblobs\BlobContour.h	2;"	d
BLOB_OPERATORS_H_INCLUDED	.\src\3rdparty\cvblobs\BlobOperators.h	2;"	d
BLOB_PROPERTIES_H_INCLUDED	.\src\3rdparty\cvblobs\BlobProperties.h	6;"	d
B_EQUAL	.\src\3rdparty\cvblobs\BlobResult.h	51;"	d
B_EXCLUDE	.\src\3rdparty\cvblobs\BlobResult.h	47;"	d
B_GREATER	.\src\3rdparty\cvblobs\BlobResult.h	53;"	d
B_GREATER_OR_EQUAL	.\src\3rdparty\cvblobs\BlobResult.h	55;"	d
B_INCLUDE	.\src\3rdparty\cvblobs\BlobResult.h	46;"	d
B_INSIDE	.\src\3rdparty\cvblobs\BlobResult.h	57;"	d
B_LESS	.\src\3rdparty\cvblobs\BlobResult.h	54;"	d
B_LESS_OR_EQUAL	.\src\3rdparty\cvblobs\BlobResult.h	56;"	d
B_NOT_EQUAL	.\src\3rdparty\cvblobs\BlobResult.h	52;"	d
B_OUTSIDE	.\src\3rdparty\cvblobs\BlobResult.h	58;"	d
Blob_vector	.\src\3rdparty\cvblobs\ComponentLabeling.h	/^typedef std::vector<CBlob*>	Blob_vector;$/;"	t
CAPTURE_PARSE_POS	.\src\3rdparty\libconfig\grammar.c	119;"	d	file:
CBLOB_INSPECTA_INCLUDED	.\src\3rdparty\cvblobs\blob.h	19;"	d
CBlob	.\src\3rdparty\cvblobs\blob.cpp	/^CBlob::CBlob( const CBlob &src )$/;"	f	class:CBlob
CBlob	.\src\3rdparty\cvblobs\blob.cpp	/^CBlob::CBlob( const CBlob *src )$/;"	f	class:CBlob
CBlob	.\src\3rdparty\cvblobs\blob.cpp	/^CBlob::CBlob( t_labelType id, CvPoint startPoint, CvSize originalImageSize )$/;"	f	class:CBlob
CBlob	.\src\3rdparty\cvblobs\blob.cpp	/^CBlob::CBlob()$/;"	f	class:CBlob
CBlob	.\src\3rdparty\cvblobs\blob.h	/^class CBlob$/;"	c
CBlobContour	.\src\3rdparty\cvblobs\BlobContour.cpp	/^CBlobContour::CBlobContour( CBlobContour *source )$/;"	f	class:CBlobContour
CBlobContour	.\src\3rdparty\cvblobs\BlobContour.cpp	/^CBlobContour::CBlobContour()$/;"	f	class:CBlobContour
CBlobContour	.\src\3rdparty\cvblobs\BlobContour.cpp	/^CBlobContour::CBlobContour(CvPoint startPoint, CvMemStorage *storage )$/;"	f	class:CBlobContour
CBlobContour	.\src\3rdparty\cvblobs\BlobContour.h	/^class CBlobContour$/;"	c
CBlobGetArea	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetArea : public COperadorBlob$/;"	c
CBlobGetAreaElipseRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetAreaElipseRatio: public COperadorBlob$/;"	c
CBlobGetAxisRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetAxisRatio: public COperadorBlob$/;"	c
CBlobGetBreadth	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetBreadth: public COperadorBlob$/;"	c
CBlobGetCompactness	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetCompactness: public COperadorBlob$/;"	c
CBlobGetDiffX	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetDiffX: public COperadorBlob$/;"	c
CBlobGetDiffY	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetDiffY: public COperadorBlob$/;"	c
CBlobGetDistanceFromPoint	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetDistanceFromPoint( const double x, const double y )$/;"	f	class:CBlobGetDistanceFromPoint
CBlobGetDistanceFromPoint	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetDistanceFromPoint()$/;"	f	class:CBlobGetDistanceFromPoint
CBlobGetDistanceFromPoint	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetDistanceFromPoint: public COperadorBlob$/;"	c
CBlobGetElongation	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetElongation: public COperadorBlob$/;"	c
CBlobGetExterior	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExterior()$/;"	f	class:CBlobGetExterior
CBlobGetExterior	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExterior(IplImage *mask, bool xBorder = true, bool yBorder = true)$/;"	f	class:CBlobGetExterior
CBlobGetExterior	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetExterior: public COperadorBlob$/;"	c
CBlobGetExternHullPerimeterRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExternHullPerimeterRatio( IplImage *mask, bool xBorder = true, bool yBorder = true )$/;"	f	class:CBlobGetExternHullPerimeterRatio
CBlobGetExternHullPerimeterRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExternHullPerimeterRatio()$/;"	f	class:CBlobGetExternHullPerimeterRatio
CBlobGetExternHullPerimeterRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetExternHullPerimeterRatio: public COperadorBlob$/;"	c
CBlobGetExternPerimeter	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExternPerimeter( IplImage *mask, bool xBorder = true, bool yBorder = true )$/;"	f	class:CBlobGetExternPerimeter
CBlobGetExternPerimeter	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExternPerimeter()$/;"	f	class:CBlobGetExternPerimeter
CBlobGetExternPerimeter	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetExternPerimeter: public COperadorBlob$/;"	c
CBlobGetExternPerimeterRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExternPerimeterRatio( IplImage *mask, bool xBorder = true, bool yBorder = true )$/;"	f	class:CBlobGetExternPerimeterRatio
CBlobGetExternPerimeterRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetExternPerimeterRatio()$/;"	f	class:CBlobGetExternPerimeterRatio
CBlobGetExternPerimeterRatio	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetExternPerimeterRatio: public COperadorBlob$/;"	c
CBlobGetHullArea	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetHullArea: public COperadorBlob$/;"	c
CBlobGetHullPerimeter	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetHullPerimeter: public COperadorBlob$/;"	c
CBlobGetID	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetID : public COperadorBlob$/;"	c
CBlobGetLength	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetLength: public COperadorBlob$/;"	c
CBlobGetMajorAxisLength	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMajorAxisLength: public COperadorBlob$/;"	c
CBlobGetMaxX	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMaxX: public COperadorBlob$/;"	c
CBlobGetMaxXatMaxY	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMaxXatMaxY: public COperadorBlob$/;"	c
CBlobGetMaxY	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMaxY: public COperadorBlob$/;"	c
CBlobGetMaxYatMinX	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMaxYatMinX: public COperadorBlob$/;"	c
CBlobGetMean	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetMean( IplImage *image )$/;"	f	class:CBlobGetMean
CBlobGetMean	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetMean()$/;"	f	class:CBlobGetMean
CBlobGetMean	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMean: public COperadorBlob$/;"	c
CBlobGetMinX	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMinX: public COperadorBlob$/;"	c
CBlobGetMinXatMinY	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMinXatMinY: public COperadorBlob$/;"	c
CBlobGetMinY	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMinY: public COperadorBlob$/;"	c
CBlobGetMinYatMaxX	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMinYatMaxX: public COperadorBlob$/;"	c
CBlobGetMinorAxisLength	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMinorAxisLength: public COperadorBlob$/;"	c
CBlobGetMoment	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetMoment( int p, int q )$/;"	f	class:CBlobGetMoment
CBlobGetMoment	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetMoment()$/;"	f	class:CBlobGetMoment
CBlobGetMoment	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetMoment: public COperadorBlob$/;"	c
CBlobGetOrientation	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetOrientation: public COperadorBlob$/;"	c
CBlobGetOrientationCos	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetOrientationCos: public COperadorBlob$/;"	c
CBlobGetPerimeter	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetPerimeter: public COperadorBlob$/;"	c
CBlobGetRoughness	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetRoughness: public COperadorBlob$/;"	c
CBlobGetStdDev	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetStdDev( IplImage *image )$/;"	f	class:CBlobGetStdDev
CBlobGetStdDev	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetStdDev()$/;"	f	class:CBlobGetStdDev
CBlobGetStdDev	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetStdDev: public COperadorBlob$/;"	c
CBlobGetXCenter	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetXCenter: public COperadorBlob$/;"	c
CBlobGetXYInside	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetXYInside( CvPoint2D32f p )$/;"	f	class:CBlobGetXYInside
CBlobGetXYInside	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CBlobGetXYInside()$/;"	f	class:CBlobGetXYInside
CBlobGetXYInside	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetXYInside: public COperadorBlob$/;"	c
CBlobGetYCenter	.\src\3rdparty\cvblobs\BlobOperators.h	/^class CBlobGetYCenter: public COperadorBlob$/;"	c
CBlobProperties	.\src\3rdparty\cvblobs\BlobProperties.h	/^class CBlobProperties$/;"	c
CBlobResult	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlobResult::CBlobResult( const CBlobResult &source )$/;"	f	class:CBlobResult
CBlobResult	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlobResult::CBlobResult()$/;"	f	class:CBlobResult
CBlobResult	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlobResult::CBlobResult(IplImage *source, IplImage *mask, uchar backgroundColor )$/;"	f	class:CBlobResult
CBlobResult	.\src\3rdparty\cvblobs\BlobResult.h	/^class CBlobResult  $/;"	c
CHUNK_SIZE	.\src\3rdparty\libconfig\libconfig.c	45;"	d	file:
CHUNK_SIZE	.\src\3rdparty\libconfig\scanctx.c	31;"	d	file:
CLAMP	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1007;"	d
CLAMP_0_255	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1010;"	d
CLAMP_BOTTOM	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1009;"	d
CLAMP_TOP	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1008;"	d
CLUSTERING_H_	.\src\libopentld\tld\Clustering.h	27;"	d
COMMENT	.\src\3rdparty\libconfig\scanner.c	628;"	d	file:
COMMENT	.\src\3rdparty\libconfig\scanner.h	222;"	d
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	224;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	260;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	263;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	103;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	110;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	117;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	124;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	132;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	144;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	147;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	14;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	150;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	153;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	168;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	182;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	192;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	210;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	219;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	222;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	237;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	244;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	262;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	265;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	268;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	37;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	45;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	51;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	57;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	66;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	75;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	96;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	185;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	215;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	232;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	247;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	183;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	19;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	213;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	225;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	247;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	252;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	78;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	91;"	d	file:
COMPILER_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	197;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	233;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	248;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	106;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	113;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	120;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	134;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	158;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	226;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	248;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	54;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	69;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	92;"	d	file:
COMPILER_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	99;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	204;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	217;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	107;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	128;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	141;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	159;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	188;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	199;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	215;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	227;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	22;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	249;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	71;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_TWEAK	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_TWEAK	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_TWEAK	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_TWEAK	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_TWEAK	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	28;"	d	file:
CONFIGDIALOG_H	.\src\opentld\qopentld\ConfigDialog.h	25;"	d
CONFIG_ERR_FILE_IO	.\src\3rdparty\libconfig\libconfig.h	/^  CONFIG_ERR_FILE_IO = 1,$/;"	e	enum:__anon1
CONFIG_ERR_NONE	.\src\3rdparty\libconfig\libconfig.h	/^  CONFIG_ERR_NONE = 0,$/;"	e	enum:__anon1
CONFIG_ERR_PARSE	.\src\3rdparty\libconfig\libconfig.h	/^  CONFIG_ERR_PARSE = 2$/;"	e	enum:__anon1
CONFIG_FALSE	.\src\3rdparty\libconfig\libconfig.h	64;"	d
CONFIG_FORMAT_DEFAULT	.\src\3rdparty\libconfig\libconfig.h	58;"	d
CONFIG_FORMAT_HEX	.\src\3rdparty\libconfig\libconfig.h	59;"	d
CONFIG_H	.\src\opentld\main\Config.h	21;"	d
CONFIG_LOOKUP_NO_EXCEPTIONS	.\src\3rdparty\libconfig\libconfigcpp.c++	457;"	d	file:
CONFIG_OPTION_AUTOCONVERT	.\src\3rdparty\libconfig\libconfig.h	61;"	d
CONFIG_TRUE	.\src\3rdparty\libconfig\libconfig.h	63;"	d
CONFIG_TYPE_ARRAY	.\src\3rdparty\libconfig\libconfig.h	55;"	d
CONFIG_TYPE_BOOL	.\src\3rdparty\libconfig\libconfig.h	54;"	d
CONFIG_TYPE_FLOAT	.\src\3rdparty\libconfig\libconfig.h	52;"	d
CONFIG_TYPE_GROUP	.\src\3rdparty\libconfig\libconfig.h	49;"	d
CONFIG_TYPE_INT	.\src\3rdparty\libconfig\libconfig.h	50;"	d
CONFIG_TYPE_INT64	.\src\3rdparty\libconfig\libconfig.h	51;"	d
CONFIG_TYPE_LIST	.\src\3rdparty\libconfig\libconfig.h	56;"	d
CONFIG_TYPE_NONE	.\src\3rdparty\libconfig\libconfig.h	48;"	d
CONFIG_TYPE_STRING	.\src\3rdparty\libconfig\libconfig.h	53;"	d
COperadorBlob	.\src\3rdparty\cvblobs\BlobOperators.h	/^class COperadorBlob$/;"	c
CT_ASSERT_FAILURE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    struct CT_ASSERT_FAILURE<true> {};$/;"	s	namespace:NcvCTprep
CUDA_COMMON_H_	.\src\libopentld\tld\detector\cuda\CUDA.h	2;"	d
CU_DETECTORCASCADE_H_	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	21;"	d
CalculateMean	.\src\libopentld\tld\TLDUtil.cpp	/^float CalculateMean(float *value, int n)$/;"	f	namespace:tld
ClearBlobs	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::ClearBlobs()$/;"	f	class:CBlobResult
ClearContours	.\src\3rdparty\cvblobs\blob.cpp	/^void CBlob::ClearContours()$/;"	f	class:CBlob
Clustering	.\src\libopentld\tld\Clustering.cpp	/^Clustering::Clustering()$/;"	f	class:tld::Clustering
Clustering	.\src\libopentld\tld\Clustering.h	/^class Clustering$/;"	c	namespace:tld
ComponentLabeling	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^bool ComponentLabeling(	IplImage* inputImage,$/;"	f
Config	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API Config$/;"	c	namespace:libconfig
Config	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Config::Config()$/;"	f	class:libconfig::Config
Config	.\src\opentld\main\Config.cpp	/^Config::Config() :$/;"	f	class:tld::Config
Config	.\src\opentld\main\Config.cpp	/^Config::Config(Settings &settings) :$/;"	f	class:tld::Config
Config	.\src\opentld\main\Config.h	/^class Config$/;"	c	namespace:tld
ConfigDestructor	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::ConfigDestructor(void *arg)$/;"	f	class:libconfig::Config
ConfigDialog	.\src\opentld\qopentld\ConfigDialog.cpp	/^ConfigDialog::ConfigDialog(Settings *settings, bool *correctClosed, QWidget *parent) :$/;"	f	class:ConfigDialog
ConfigDialog	.\src\opentld\qopentld\ConfigDialog.h	/^    ConfigDialog() {}$/;"	f	class:ConfigDialog
ConfigDialog	.\src\opentld\qopentld\ConfigDialog.h	/^class ConfigDialog: public QDialog$/;"	c
ConfigException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API ConfigException : public std::exception { };$/;"	c	namespace:libconfig
CuDetectorCascade	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^CuDetectorCascade::CuDetectorCascade()$/;"	f	class:tld::cuda::CuDetectorCascade
CuDetectorCascade	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	/^class CuDetectorCascade : public IDetectorCascade$/;"	c	namespace:tld::cuda
CuEnsembleClassifier	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^CuEnsembleClassifier::CuEnsembleClassifier()$/;"	f	class:tld::cuda::CuEnsembleClassifier
CuEnsembleClassifier	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^class CuEnsembleClassifier : public IEnsembleClassifier$/;"	c	namespace:tld::cuda
CuVarianceFilter	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^CuVarianceFilter::CuVarianceFilter()$/;"	f	class:tld::cuda::CuVarianceFilter
CuVarianceFilter	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	/^class CuVarianceFilter : public IVarianceFilter$/;"	c	namespace:tld::cuda
DEC	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	434;"	d	file:
DEC	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	439;"	d	file:
DEGREE2RAD	.\src\3rdparty\cvblobs\BlobOperators.h	13;"	d
DETECTIONRESULT_H_	.\src\libopentld\tld\DetectionResult.h	28;"	d
DETECTORCASCADE_H_	.\src\libopentld\tld\detector\DetectorCascade.h	30;"	d
DetectionResult	.\src\libopentld\tld\DetectionResult.cpp	/^DetectionResult::DetectionResult()$/;"	f	class:tld::DetectionResult
DetectionResult	.\src\libopentld\tld\DetectionResult.h	/^class DetectionResult$/;"	c	namespace:tld
DetectorCascade	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^DetectorCascade::DetectorCascade()$/;"	f	class:tld::DetectorCascade
DetectorCascade	.\src\libopentld\tld\detector\DetectorCascade.h	/^class DetectorCascade : public IDetectorCascade$/;"	c	namespace:tld
DllMain	.\src\3rdparty\libconfig\libconfig.c	/^BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)$/;"	f
DoFilter	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::DoFilter(CBlobResult &dst, int filterAction, funcio_calculBlob *evaluador, $/;"	f	class:CBlobResult
ECHO	.\src\3rdparty\libconfig\scanner.c	766;"	d	file:
ELEM_SWAP	.\src\libopentld\mftracker\Median.cpp	138;"	d	file:
ELEM_SWAP	.\src\libopentld\mftracker\Median.cpp	33;"	d	file:
ENSEMBLECLASSIFIER_H_	.\src\libopentld\tld\detector\EnsembleClassifier.h	30;"	d
ENS_CLS_BLOCK_SIZE	.\src\libopentld\tld\detector\cuda\CUDA.h	12;"	d
EOB_ACT_CONTINUE_SCAN	.\src\3rdparty\libconfig\scanner.c	182;"	d	file:
EOB_ACT_END_OF_FILE	.\src\3rdparty\libconfig\scanner.c	183;"	d	file:
EOB_ACT_LAST_MATCH	.\src\3rdparty\libconfig\scanner.c	184;"	d	file:
EOF	.\src\opentld\main\Config.cpp	485;"	d	file:
ERR	.\src\opentld\main\Config.cpp	486;"	d	file:
EXCEPCIO_CALCUL_BLOBS	.\src\3rdparty\cvblobs\BlobResult.h	67;"	d
EXCEPTION_BLOB_OUT_OF_BOUNDS	.\src\3rdparty\cvblobs\BlobResult.h	66;"	d
EnsembleClassifier	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^EnsembleClassifier::EnsembleClassifier()$/;"	f	class:tld::EnsembleClassifier
EnsembleClassifier	.\src\libopentld\tld\detector\EnsembleClassifier.h	/^class EnsembleClassifier : public IEnsembleClassifier$/;"	c	namespace:tld
Exterior	.\src\3rdparty\cvblobs\blob.cpp	/^int	CBlob::Exterior(IplImage *mask, bool xBorder \/* = true *\/, bool yBorder \/* = true *\/)$/;"	f	class:CBlob
ExternPerimeter	.\src\3rdparty\cvblobs\blob.cpp	/^double CBlob::ExternPerimeter( IplImage *maskImage, bool xBorder \/* = true *\/, bool yBorder \/* = true *\/)$/;"	f	class:CBlob
FBTRACK_H_	.\src\libopentld\mftracker\FBTrack.h	28;"	d
FILE_SEPARATOR	.\src\3rdparty\libconfig\wincompat.h	56;"	d
FILE_SEPARATOR	.\src\3rdparty\libconfig\wincompat.h	65;"	d
FLEXINT_H	.\src\3rdparty\libconfig\scanner.c	30;"	d	file:
FLEXINT_H	.\src\3rdparty\libconfig\scanner.h	34;"	d
FLEX_BETA	.\src\3rdparty\libconfig\scanner.c	14;"	d	file:
FLEX_BETA	.\src\3rdparty\libconfig\scanner.h	18;"	d
FLEX_SCANNER	.\src\3rdparty\libconfig\scanner.c	9;"	d	file:
FLEX_SCANNER	.\src\3rdparty\libconfig\scanner.h	13;"	d
FLOAT_PRECISION	.\src\3rdparty\libconfig\libconfig.c	46;"	d	file:
FOREGROUNDDETECTOR_H_	.\src\libopentld\tld\detector\ForegroundDetector.h	28;"	d
FileIOException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API FileIOException : public ConfigException$/;"	c	namespace:libconfig
FillBlob	.\src\3rdparty\cvblobs\blob.cpp	/^void CBlob::FillBlob( IplImage *imatge, CvScalar color, int offsetX \/*=0*\/, int offsetY \/*=0*\/) 					  $/;"	f	class:CBlob
Filter	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::Filter(CBlobResult &dst, $/;"	f	class:CBlobResult
ForegroundDetector	.\src\libopentld\tld\detector\ForegroundDetector.cpp	/^ForegroundDetector::ForegroundDetector()$/;"	f	class:tld::ForegroundDetector
ForegroundDetector	.\src\libopentld\tld\detector\ForegroundDetector.h	/^class ForegroundDetector$/;"	c	namespace:tld
Format	.\src\3rdparty\libconfig\libconfig.h++	/^  enum Format$/;"	g	class:libconfig::Setting
FormatDefault	.\src\3rdparty\libconfig\libconfig.h++	/^    FormatDefault = 0,$/;"	e	enum:libconfig::Setting::Format
FormatHex	.\src\3rdparty\libconfig\libconfig.h++	/^    FormatHex = 1$/;"	e	enum:libconfig::Setting::Format
GET_ABOVE_IMAGEPIXEL	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline unsigned char GET_ABOVE_IMAGEPIXEL( unsigned char *currentPixel, IplImage *image )$/;"	f
GET_BELOW_IMAGEPIXEL	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline unsigned char GET_BELOW_IMAGEPIXEL( unsigned char *currentPixel, IplImage *image )$/;"	f
GET_BELOW_VISITEDPIXEL	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline bool GET_BELOW_VISITEDPIXEL( bool *currentPixel, int imageWidth )$/;"	f
GET_IMAGEMASK_PIXEL	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline bool GET_IMAGEMASK_PIXEL( IplImage *mask, CvPoint p )$/;"	f
GET_IMAGE_PIXEL	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^inline unsigned char GET_IMAGE_PIXEL( IplImage *image, CvPoint p )$/;"	f
GUI_H_	.\src\opentld\main\Gui.h	21;"	d
GetArea	.\src\3rdparty\cvblobs\BlobContour.cpp	/^double CBlobContour::GetArea()$/;"	f	class:CBlobContour
GetArea	.\src\3rdparty\cvblobs\BlobProperties.cpp	/^double CBlobProperties::GetArea()$/;"	f	class:CBlobProperties
GetBlob	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlob *CBlobResult::GetBlob(int indexblob)$/;"	f	class:CBlobResult
GetBlob	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlob CBlobResult::GetBlob(int indexblob) const$/;"	f	class:CBlobResult
GetBoundingBox	.\src\3rdparty\cvblobs\blob.cpp	/^CvRect CBlob::GetBoundingBox()$/;"	f	class:CBlob
GetChainCode	.\src\3rdparty\cvblobs\BlobContour.h	/^	t_chainCodeList GetChainCode()$/;"	f	class:CBlobContour
GetContourPoints	.\src\3rdparty\cvblobs\BlobContour.cpp	/^t_PointList CBlobContour::GetContourPoints()$/;"	f	class:CBlobContour
GetConvexHull	.\src\3rdparty\cvblobs\blob.cpp	/^t_PointList CBlob::GetConvexHull()$/;"	f	class:CBlob
GetEllipse	.\src\3rdparty\cvblobs\blob.cpp	/^CvBox2D CBlob::GetEllipse()$/;"	f	class:CBlob
GetExternalContour	.\src\3rdparty\cvblobs\blob.h	/^	CBlobContour *GetExternalContour()$/;"	f	class:CBlob
GetID	.\src\3rdparty\cvblobs\blob.h	/^	t_labelType GetID()$/;"	f	class:CBlob
GetMoment	.\src\3rdparty\cvblobs\BlobContour.cpp	/^double CBlobContour::GetMoment(int p, int q)$/;"	f	class:CBlobContour
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetArea
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetAreaElipseRatio
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetAxisRatio
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetBreadth
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetCompactness
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetDiffX
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetDiffY
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetDistanceFromPoint
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetElongation
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetExterior
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetExternHullPerimeterRatio
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetExternPerimeter
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetExternPerimeterRatio
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetHullArea
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetHullPerimeter
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetID
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetLength
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMajorAxisLength
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMaxX
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMaxXatMaxY
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMaxY
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMaxYatMinX
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMean
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMinX
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMinXatMinY
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMinY
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMinYatMaxX
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMinorAxisLength
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetMoment
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetOrientation
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetOrientationCos
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetPerimeter
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetRoughness
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetStdDev
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetXCenter
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetXYInside
GetNom	.\src\3rdparty\cvblobs\BlobOperators.h	/^	const char *GetNom()$/;"	f	class:CBlobGetYCenter
GetNthBlob	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::GetNthBlob( funcio_calculBlob *criteri, int nBlob, CBlob &dst ) const$/;"	f	class:CBlobResult
GetNumBlobs	.\src\3rdparty\cvblobs\BlobResult.h	/^	int GetNumBlobs() const $/;"	f	class:CBlobResult
GetNumber	.\src\3rdparty\cvblobs\BlobResult.cpp	/^double CBlobResult::GetNumber( int indexBlob, funcio_calculBlob *evaluador ) const$/;"	f	class:CBlobResult
GetPerimeter	.\src\3rdparty\cvblobs\BlobContour.cpp	/^double CBlobContour::GetPerimeter()$/;"	f	class:CBlobContour
GetPerimeter	.\src\3rdparty\cvblobs\BlobProperties.cpp	/^double CBlobProperties::GetPerimeter()$/;"	f	class:CBlobProperties
GetResult	.\src\3rdparty\cvblobs\BlobResult.cpp	/^double_vector CBlobResult::GetResult( funcio_calculBlob *evaluador ) const$/;"	f	class:CBlobResult
GetSTLResult	.\src\3rdparty\cvblobs\BlobResult.cpp	/^double_stl_vector CBlobResult::GetSTLResult( funcio_calculBlob *evaluador ) const$/;"	f	class:CBlobResult
GetStartPoint	.\src\3rdparty\cvblobs\BlobContour.h	/^	CvPoint GetStartPoint() const$/;"	f	class:CBlobContour
GetStorage	.\src\3rdparty\cvblobs\blob.h	/^	CvMemStorage *GetStorage()$/;"	f	class:CBlob
Gui	.\src\opentld\main\Gui.cpp	/^Gui::Gui() :$/;"	f	class:tld::Gui
Gui	.\src\opentld\main\Gui.h	/^class Gui$/;"	c	namespace:tld
HEX	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	445;"	d	file:
HEX	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	450;"	d	file:
IDETECTORCASCADE_H_	.\src\libopentld\tld\IDetectorCascade.h	27;"	d
ID_VOID_MAIN	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	6;"	d	file:
IDetectorCascade	.\src\libopentld\tld\IDetectorCascade.h	/^class IDetectorCascade$/;"	c	namespace:tld
IENSEMBLECLASSIFIER_H_	.\src\libopentld\tld\IEnsembleClassifier.h	27;"	d
IEnsembleClassifier	.\src\libopentld\tld\IEnsembleClassifier.h	/^class IEnsembleClassifier$/;"	c	namespace:tld
IMACQ_CAM	.\src\libopentld\imacq\ImAcq.h	/^    IMACQ_CAM, \/\/!< Camera$/;"	e	enum:ImacqMethod
IMACQ_FILE	.\src\libopentld\imacq\ImAcq.h	/^    IMACQ_FILE, \/\/!< Video$/;"	e	enum:ImacqMethod
IMACQ_IMGS	.\src\libopentld\imacq\ImAcq.h	/^    IMACQ_IMGS, \/\/!< Images$/;"	e	enum:ImacqMethod
IMACQ_IMPL_H_	.\src\libopentld\imacq\ImAcq.h	28;"	d
IMACQ_LIVESIM	.\src\libopentld\imacq\ImAcq.h	/^    IMACQ_LIVESIM \/\/!< Livesim$/;"	e	enum:ImacqMethod
IMACQ_VID	.\src\libopentld\imacq\ImAcq.h	/^    IMACQ_VID, \/\/!< Video$/;"	e	enum:ImacqMethod
INCLUDE	.\src\3rdparty\libconfig\scanner.c	630;"	d	file:
INCVMemAllocator	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCV_EXPORTS INCVMemAllocator$/;"	c
INITIAL	.\src\3rdparty\libconfig\scanner.c	627;"	d	file:
INITIAL	.\src\3rdparty\libconfig\scanner.h	221;"	d
INNCLASSIFIER_H_	.\src\libopentld\tld\INNClassifier.h	27;"	d
INNClassifier	.\src\libopentld\tld\INNClassifier.h	/^class INNClassifier$/;"	c	namespace:tld
INT16_MAX	.\src\3rdparty\libconfig\scanner.c	72;"	d	file:
INT16_MAX	.\src\3rdparty\libconfig\scanner.h	77;"	d
INT16_MIN	.\src\3rdparty\libconfig\scanner.c	63;"	d	file:
INT16_MIN	.\src\3rdparty\libconfig\scanner.h	68;"	d
INT32_MAX	.\src\3rdparty\libconfig\scanner.c	75;"	d	file:
INT32_MAX	.\src\3rdparty\libconfig\scanner.h	80;"	d
INT32_MAX	.\src\3rdparty\libconfig\wincompat.h	76;"	d
INT32_MIN	.\src\3rdparty\libconfig\scanner.c	66;"	d	file:
INT32_MIN	.\src\3rdparty\libconfig\scanner.h	71;"	d
INT32_MIN	.\src\3rdparty\libconfig\wincompat.h	80;"	d
INT64_CONST	.\src\3rdparty\libconfig\wincompat.h	72;"	d
INT64_CONST	.\src\3rdparty\libconfig\wincompat.h	85;"	d
INT64_FMT	.\src\3rdparty\libconfig\wincompat.h	51;"	d
INT64_FMT	.\src\3rdparty\libconfig\wincompat.h	60;"	d
INT64_HEX_FMT	.\src\3rdparty\libconfig\wincompat.h	54;"	d
INT64_HEX_FMT	.\src\3rdparty\libconfig\wincompat.h	63;"	d
INT8_MAX	.\src\3rdparty\libconfig\scanner.c	69;"	d	file:
INT8_MAX	.\src\3rdparty\libconfig\scanner.h	74;"	d
INT8_MIN	.\src\3rdparty\libconfig\scanner.c	60;"	d	file:
INT8_MIN	.\src\3rdparty\libconfig\scanner.h	65;"	d
INTEGRALIMAGE_H_	.\src\libopentld\tld\detector\IntegralImage.h	28;"	d
IN_ARRAY	.\src\3rdparty\libconfig\grammar.c	106;"	d	file:
IN_LIST	.\src\3rdparty\libconfig\grammar.c	109;"	d	file:
IVARIANCEFILTER_H_	.\src\libopentld\tld\IVarianceFilter.h	27;"	d
IVarianceFilter	.\src\libopentld\tld\IVarianceFilter.h	/^class IVarianceFilter$/;"	c	namespace:tld
ImAcq	.\src\libopentld\imacq\ImAcq.h	/^} ImAcq ;$/;"	t	typeref:struct:__anon3
ImacqMethod	.\src\libopentld\imacq\ImAcq.h	/^enum ImacqMethod$/;"	g
IntegralImage	.\src\libopentld\tld\detector\IntegralImage.h	/^    IntegralImage(cv::Size size)$/;"	f	class:tld::IntegralImage
IntegralImage	.\src\libopentld\tld\detector\IntegralImage.h	/^class IntegralImage$/;"	c	namespace:tld
IsEmpty	.\src\3rdparty\cvblobs\BlobContour.h	/^	bool IsEmpty()$/;"	f	class:CBlobContour
IsEmpty	.\src\3rdparty\cvblobs\blob.cpp	/^bool CBlob::IsEmpty()$/;"	f	class:CBlob
JoinBlob	.\src\3rdparty\cvblobs\blob.cpp	/^void CBlob::JoinBlob( CBlob *blob )$/;"	f	class:CBlob
K_LOG2_WARP_SIZE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^const Ncv32u K_LOG2_WARP_SIZE = 5;$/;"	v
K_WARP_SIZE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^const Ncv32u K_WARP_SIZE = 32;$/;"	v
LIBCONFIGXX_API	.\src\3rdparty\libconfig\libconfig.h++	32;"	d
LIBCONFIGXX_API	.\src\3rdparty\libconfig\libconfig.h++	34;"	d
LIBCONFIGXX_API	.\src\3rdparty\libconfig\libconfig.h++	36;"	d
LIBCONFIGXX_API	.\src\3rdparty\libconfig\libconfig.h++	39;"	d
LIBCONFIGXX_VER_MAJOR	.\src\3rdparty\libconfig\libconfig.h++	42;"	d
LIBCONFIGXX_VER_MINOR	.\src\3rdparty\libconfig\libconfig.h++	43;"	d
LIBCONFIGXX_VER_REVISION	.\src\3rdparty\libconfig\libconfig.h++	44;"	d
LIBCONFIG_API	.\src\3rdparty\libconfig\libconfig.h	32;"	d
LIBCONFIG_API	.\src\3rdparty\libconfig\libconfig.h	34;"	d
LIBCONFIG_API	.\src\3rdparty\libconfig\libconfig.h	36;"	d
LIBCONFIG_API	.\src\3rdparty\libconfig\libconfig.h	39;"	d
LIBCONFIG_VER_MAJOR	.\src\3rdparty\libconfig\libconfig.h	42;"	d
LIBCONFIG_VER_MINOR	.\src\3rdparty\libconfig\libconfig.h	43;"	d
LIBCONFIG_VER_REVISION	.\src\3rdparty\libconfig\libconfig.h	44;"	d
LK_H_	.\src\libopentld\mftracker\Lk.h	28;"	d
MAIN_H_	.\src\opentld\main\Main.h	28;"	d
MAX_COUNT	.\src\libopentld\mftracker\Lk.cpp	/^const int MAX_COUNT = 500;$/;"	v
MAX_IMG	.\src\libopentld\mftracker\Lk.cpp	/^const int MAX_IMG = 2;$/;"	v
MAX_INCLUDE_DEPTH	.\src\3rdparty\libconfig\scanctx.h	32;"	d
MAX_MOMENTS_ORDER	.\src\3rdparty\cvblobs\BlobContour.h	19;"	d
MAX_MOMENTS_ORDER	.\src\3rdparty\cvblobs\BlobProperties.h	23;"	d
MEDIANFLOWTRACKER_H_	.\src\libopentld\tld\MedianFlowTracker.h	28;"	d
MEDIAN_H_	.\src\libopentld\mftracker\Median.h	29;"	d
Main	.\src\opentld\main\Main.h	/^    Main()$/;"	f	class:Main
Main	.\src\opentld\main\Main.h	/^class Main$/;"	c
MaxX	.\src\3rdparty\cvblobs\blob.h	/^	double MaxX()$/;"	f	class:CBlob
MaxY	.\src\3rdparty\cvblobs\blob.h	/^	double MaxY()$/;"	f	class:CBlob
Mean	.\src\3rdparty\cvblobs\blob.cpp	/^double CBlob::Mean( IplImage *image )$/;"	f	class:CBlob
MedianFlowTracker	.\src\libopentld\tld\MedianFlowTracker.cpp	/^MedianFlowTracker::MedianFlowTracker()$/;"	f	class:tld::MedianFlowTracker
MedianFlowTracker	.\src\libopentld\tld\MedianFlowTracker.h	/^class MedianFlowTracker$/;"	c	namespace:tld
MinX	.\src\3rdparty\cvblobs\blob.h	/^	double MinX()$/;"	f	class:CBlob
MinY	.\src\3rdparty\cvblobs\blob.h	/^	double MinY()$/;"	f	class:CBlob
Moment	.\src\3rdparty\cvblobs\blob.cpp	/^double CBlob::Moment(int p, int q)$/;"	f	class:CBlob
N	.\src\libopentld\tld\TLD.cpp	/^    int N;$/;"	m	struct:tld::__anon5	file:
NCVDebugOutputHandler	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef void NCVDebugOutputHandler(const std::string &msg);$/;"	t
NCVMatrix	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMatrix()$/;"	f	class:NCVMatrix
NCVMatrix	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCVMatrix$/;"	c
NCVMatrixAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMatrixAlloc(INCVMemAllocator &allocator_, Ncv32u width_, Ncv32u height_, Ncv32u pitch_=0)$/;"	f	class:NCVMatrixAlloc
NCVMatrixAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCVMatrixAlloc : public NCVMatrix<T>$/;"	c
NCVMatrixReuse	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMatrixReuse(const NCVMatrix<T> &mat, NcvRect32u roi)$/;"	f	class:NCVMatrixReuse
NCVMatrixReuse	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMatrixReuse(const NCVMemSegment &memSegment, Ncv32u alignment, Ncv32u width_, Ncv32u height_, Ncv32u pitch_=0, NcvBool bSkipPitchCheck=false)$/;"	f	class:NCVMatrixReuse
NCVMatrixReuse	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCVMatrixReuse : public NCVMatrix<T>$/;"	c
NCVMemNativeAllocator	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCV_EXPORTS NCVMemNativeAllocator : public INCVMemAllocator$/;"	c
NCVMemPtr	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NCV_EXPORTS NCVMemPtr$/;"	s
NCVMemSegment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NCV_EXPORTS NCVMemSegment$/;"	s
NCVMemStackAllocator	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCV_EXPORTS NCVMemStackAllocator : public INCVMemAllocator$/;"	c
NCVMemoryType	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^enum NCVMemoryType$/;"	g
NCVMemoryTypeDevice	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryTypeDevice$/;"	e	enum:NCVMemoryType
NCVMemoryTypeHostPageable	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryTypeHostPageable,$/;"	e	enum:NCVMemoryType
NCVMemoryTypeHostPinned	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryTypeHostPinned,$/;"	e	enum:NCVMemoryType
NCVMemoryTypeNone	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryTypeNone,$/;"	e	enum:NCVMemoryType
NCVStatus	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef Ncv32u NCVStatus;$/;"	t
NCVVector	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVVector()$/;"	f	class:NCVVector
NCVVector	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCVVector$/;"	c
NCVVectorAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVVectorAlloc(INCVMemAllocator &allocator_, Ncv32u length_)$/;"	f	class:NCVVectorAlloc
NCVVectorAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCVVectorAlloc : public NCVVector<T>$/;"	c
NCVVectorReuse	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVVectorReuse(const NCVMemSegment &memSegment, Ncv32u length_)$/;"	f	class:NCVVectorReuse
NCVVectorReuse	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    explicit NCVVectorReuse(const NCVMemSegment &memSegment)$/;"	f	class:NCVVectorReuse
NCVVectorReuse	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^class NCVVectorReuse : public NCVVector<T>$/;"	c
NCV_ALLOCATOR_BAD_ALLOC	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_ALLOCATOR_BAD_ALLOC,$/;"	e	enum:__anon4
NCV_ALLOCATOR_BAD_DEALLOC	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_ALLOCATOR_BAD_DEALLOC,$/;"	e	enum:__anon4
NCV_ALLOCATOR_BAD_REUSE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_ALLOCATOR_BAD_REUSE,$/;"	e	enum:__anon4
NCV_ALLOCATOR_DEALLOC_ORDER	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_ALLOCATOR_DEALLOC_ORDER,$/;"	e	enum:__anon4
NCV_ALLOCATOR_INSUFFICIENT_CAPACITY	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_ALLOCATOR_INSUFFICIENT_CAPACITY,$/;"	e	enum:__anon4
NCV_ALLOCATOR_NOT_INITIALIZED	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_ALLOCATOR_NOT_INITIALIZED,$/;"	e	enum:__anon4
NCV_CT_ASSERT	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	91;"	d
NCV_CT_PREP_PASTE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	85;"	d
NCV_CT_PREP_PASTE_AUX	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	84;"	d
NCV_CUDA_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_CUDA_ERROR,$/;"	e	enum:__anon4
NCV_DIMENSIONS_INVALID	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_DIMENSIONS_INVALID,$/;"	e	enum:__anon4
NCV_EXPORTS	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	47;"	d
NCV_EXPORTS	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	49;"	d
NCV_FILE_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_FILE_ERROR,$/;"	e	enum:__anon4
NCV_HAAR_INVALID_PIXEL_STEP	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_HAAR_INVALID_PIXEL_STEP,$/;"	e	enum:__anon4
NCV_HAAR_TOO_LARGE_FEATURES	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_HAAR_TOO_LARGE_FEATURES,$/;"	e	enum:__anon4
NCV_HAAR_TOO_MANY_FEATURES_IN_CASCADE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_HAAR_TOO_MANY_FEATURES_IN_CASCADE,$/;"	e	enum:__anon4
NCV_HAAR_TOO_MANY_FEATURES_IN_CLASSIFIER	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_HAAR_TOO_MANY_FEATURES_IN_CLASSIFIER,$/;"	e	enum:__anon4
NCV_HAAR_XML_LOADING_EXCEPTION	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_HAAR_XML_LOADING_EXCEPTION,$/;"	e	enum:__anon4
NCV_INCONSISTENT_INPUT	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_INCONSISTENT_INPUT,$/;"	e	enum:__anon4
NCV_INVALID_ROI	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_INVALID_ROI,$/;"	e	enum:__anon4
NCV_INVALID_SCALE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_INVALID_SCALE,$/;"	e	enum:__anon4
NCV_INVALID_STEP	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_INVALID_STEP,$/;"	e	enum:__anon4
NCV_LAST_STATUS	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_LAST_STATUS                           \/\/\/< Marker to continue error numeration in other files$/;"	e	enum:__anon4
NCV_MEM_COPY_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_MEM_COPY_ERROR,$/;"	e	enum:__anon4
NCV_MEM_INSUFFICIENT_CAPACITY	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_MEM_INSUFFICIENT_CAPACITY,$/;"	e	enum:__anon4
NCV_MEM_RESIDENCE_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_MEM_RESIDENCE_ERROR,$/;"	e	enum:__anon4
NCV_NOIMPL_HAAR_TILTED_FEATURES	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_NOIMPL_HAAR_TILTED_FEATURES,$/;"	e	enum:__anon4
NCV_NOT_IMPLEMENTED	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_NOT_IMPLEMENTED,$/;"	e	enum:__anon4
NCV_NPP_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_NPP_ERROR,$/;"	e	enum:__anon4
NCV_NULL_PTR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_NULL_PTR,$/;"	e	enum:__anon4
NCV_RESET_SKIP_COND	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	377;"	d
NCV_SET_SKIP_COND	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	373;"	d
NCV_SKIP_COND_BEGIN	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	381;"	d
NCV_SKIP_COND_END	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	385;"	d
NCV_SUCCESS	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_SUCCESS,$/;"	e	enum:__anon4
NCV_TEXTURE_BIND_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_TEXTURE_BIND_ERROR,$/;"	e	enum:__anon4
NCV_UNKNOWN_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_UNKNOWN_ERROR,$/;"	e	enum:__anon4
NCV_WARNING_HAAR_DETECTIONS_VECTOR_OVERFLOW	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCV_WARNING_HAAR_DETECTIONS_VECTOR_OVERFLOW,$/;"	e	enum:__anon4
NNCLASSIFIER_H_	.\src\libopentld\tld\detector\NNClassifier.h	30;"	d
NNClassifier	.\src\libopentld\tld\detector\NNClassifier.cpp	/^NNClassifier::NNClassifier()$/;"	f	class:tld::NNClassifier
NNClassifier	.\src\libopentld\tld\detector\NNClassifier.h	/^class NNClassifier : public INNClassifier$/;"	c	namespace:tld
NORMALIZEDPATCH_H_	.\src\libopentld\tld\detector\NormalizedPatch.h	27;"	d
NPPST_CUDA_KERNEL_EXECUTION_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_CUDA_KERNEL_EXECUTION_ERROR,        \/\/\/< CUDA kernel execution error$/;"	e	enum:__anon4
NPPST_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_ERROR,                              \/\/\/< Unknown error$/;"	e	enum:__anon4
NPPST_INVALID_ROI	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_INVALID_ROI,                        \/\/\/< Invalid region of interest argument$/;"	e	enum:__anon4
NPPST_INVALID_SCALE	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_INVALID_SCALE,                      \/\/\/< Invalid scale parameter passed$/;"	e	enum:__anon4
NPPST_INVALID_STEP	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_INVALID_STEP,                       \/\/\/< Invalid image lines step argument (check sign, alignment, relation to image width)$/;"	e	enum:__anon4
NPPST_MEMCPY_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_MEMCPY_ERROR,                       \/\/\/< CUDA memory copy error$/;"	e	enum:__anon4
NPPST_MEMFREE_ERR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_MEMFREE_ERR,                        \/\/\/< CUDA memory deallocation error$/;"	e	enum:__anon4
NPPST_MEM_ALLOC_ERR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_MEM_ALLOC_ERR,                      \/\/\/< CUDA memory allocation error$/;"	e	enum:__anon4
NPPST_MEM_INSUFFICIENT_BUFFER	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_MEM_INSUFFICIENT_BUFFER,            \/\/\/< Insufficient user-allocated buffer$/;"	e	enum:__anon4
NPPST_MEM_INTERNAL_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_MEM_INTERNAL_ERROR,                 \/\/\/< Internal memory management error$/;"	e	enum:__anon4
NPPST_MEM_RESIDENCE_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_MEM_RESIDENCE_ERROR,                \/\/\/< Memory residence error detected (check if pointers should be device or pinned)$/;"	e	enum:__anon4
NPPST_NULL_POINTER_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_NULL_POINTER_ERROR,                 \/\/\/< NULL pointer argument error$/;"	e	enum:__anon4
NPPST_SUCCESS	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_SUCCESS = NCV_SUCCESS,              \/\/\/< Successful operation (same as NPP_NO_ERROR)$/;"	e	enum:__anon4
NPPST_TEXTURE_BIND_ERROR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NPPST_TEXTURE_BIND_ERROR,                 \/\/\/< CUDA texture binding error or non-zero offset returned$/;"	e	enum:__anon4
NULL	.\src\opentld\main\Config.cpp	484;"	d	file:
N_A_N	.\src\libopentld\mftracker\Lk.cpp	/^const double N_A_N = -1.0;$/;"	v
Ncv16s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef              short Ncv16s;$/;"	t
Ncv16u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef     unsigned short Ncv16u;$/;"	t
Ncv32f	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef              float Ncv32f;$/;"	t
Ncv32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef                int Ncv32s;$/;"	t
Ncv32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef       unsigned int Ncv32u;$/;"	t
Ncv64f	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef             double Ncv64f;$/;"	t
Ncv64s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef          long long Ncv64s;$/;"	t
Ncv64u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    typedef uint64_t Ncv64u;$/;"	t
Ncv64u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    typedef unsigned long long Ncv64u;$/;"	t
Ncv8s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef               char Ncv8s;$/;"	t
Ncv8u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef      unsigned char Ncv8u;$/;"	t
NcvBool	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef               bool NcvBool;$/;"	t
NcvCTprep	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^namespace NcvCTprep$/;"	n
NcvPoint2D32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvPoint2D32s() : x(0), y(0) {};$/;"	f	struct:NcvPoint2D32s
NcvPoint2D32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvPoint2D32s(Ncv32s x_, Ncv32s y_) : x(x_), y(y_) {}$/;"	f	struct:NcvPoint2D32s
NcvPoint2D32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvPoint2D32s$/;"	s
NcvPoint2D32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvPoint2D32u() : x(0), y(0) {};$/;"	f	struct:NcvPoint2D32u
NcvPoint2D32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvPoint2D32u(Ncv32u x_, Ncv32u y_) : x(x_), y(y_) {}$/;"	f	struct:NcvPoint2D32u
NcvPoint2D32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvPoint2D32u$/;"	s
NcvRect32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvRect32s() : x(0), y(0), width(0), height(0) {};$/;"	f	struct:NcvRect32s
NcvRect32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvRect32s(Ncv32s x_, Ncv32s y_, Ncv32s width_, Ncv32s height_)$/;"	f	struct:NcvRect32s
NcvRect32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvRect32s$/;"	s
NcvRect32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvRect32u() : x(0), y(0), width(0), height(0) {};$/;"	f	struct:NcvRect32u
NcvRect32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvRect32u(Ncv32u x_, Ncv32u y_, Ncv32u width_, Ncv32u height_)$/;"	f	struct:NcvRect32u
NcvRect32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvRect32u$/;"	s
NcvRect8u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvRect8u() : x(0), y(0), width(0), height(0) {};$/;"	f	struct:NcvRect8u
NcvRect8u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvRect8u(Ncv8u x_, Ncv8u y_, Ncv8u width_, Ncv8u height_) : x(x_), y(y_), width(width_), height(height_) {}$/;"	f	struct:NcvRect8u
NcvRect8u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvRect8u$/;"	s
NcvSize32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvSize32s() : width(0), height(0) {};$/;"	f	struct:NcvSize32s
NcvSize32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvSize32s(Ncv32s width_, Ncv32s height_) : width(width_), height(height_) {}$/;"	f	struct:NcvSize32s
NcvSize32s	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvSize32s$/;"	s
NcvSize32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvSize32u() : width(0), height(0) {};$/;"	f	struct:NcvSize32u
NcvSize32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ NcvSize32u(Ncv32u width_, Ncv32u height_) : width(width_), height(height_) {}$/;"	f	struct:NcvSize32u
NcvSize32u	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^struct NcvSize32u$/;"	s
NcvTimer	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^typedef struct _NcvTimer *NcvTimer;$/;"	t	typeref:struct:_NcvTimer
NormalizedPatch	.\src\libopentld\tld\detector\NormalizedPatch.h	/^class NormalizedPatch$/;"	c	namespace:tld
NppStBorderType	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^enum NppStBorderType$/;"	g
NppStInterpMode	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^enum NppStInterpMode$/;"	g
NppStInterpolationState	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^ struct NppStInterpolationState$/;"	s
P	.\src\libopentld\tld\TLD.cpp	/^    int P;$/;"	m	struct:tld::__anon5	file:
PATH_TOKENS	.\src\3rdparty\libconfig\libconfig.c	44;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	288;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	291;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	294;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	297;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	300;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	303;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	306;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	309;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	312;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	315;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	318;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	321;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	324;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	327;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	330;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	333;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	336;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	339;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	342;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	345;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	348;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	351;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	354;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	357;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	360;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	373;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	376;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	380;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	293;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	296;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	299;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	302;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	305;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	308;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	311;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	314;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	317;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	320;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	323;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	326;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	329;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	332;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	335;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	338;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	341;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	344;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	347;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	350;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	353;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	356;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	359;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	362;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	365;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	369;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	372;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	375;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	378;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	381;"	d	file:
PLATFORM_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	385;"	d	file:
PRINT_TIMING	.\src\libopentld\tld\Timing.h	34;"	d
PROGRAM_EXIT	.\src\opentld\main\Main.h	/^    PROGRAM_EXIT = 0,$/;"	e	enum:Retval
PYR	.\src\libopentld\mftracker\Lk.cpp	/^static IplImage **PYR = 0;$/;"	v	file:
ParseException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API ParseException : public ConfigException$/;"	c	namespace:libconfig
ParseException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^ParseException::ParseException(const ParseException &other)$/;"	f	class:libconfig::ParseException
ParseException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^ParseException::ParseException(const char *file, int line, const char *error)$/;"	f	class:libconfig::ParseException
Perimeter	.\src\3rdparty\cvblobs\blob.cpp	/^double CBlob::Perimeter()$/;"	f	class:CBlob
PrintBlobs	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::PrintBlobs( char *nom_fitxer ) const$/;"	f	class:CBlobResult
REJECT	.\src\3rdparty\libconfig\scanner.c	546;"	d	file:
RaiseError	.\src\3rdparty\cvblobs\BlobResult.cpp	/^void CBlobResult::RaiseError(const int errorCode) const$/;"	f	class:CBlobResult
RegistraTotsOperadors	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^void RegistraTotsOperadors( t_OperadorBlobFactory &fabricaOperadorsBlob )$/;"	f
ResetChainCode	.\src\3rdparty\cvblobs\BlobContour.cpp	/^void CBlobContour::ResetChainCode()$/;"	f	class:CBlobContour
Retval	.\src\opentld\main\Main.h	/^enum Retval$/;"	g
SETTINGS_H	.\src\opentld\main\Settings.h	21;"	d
SETTING_LOOKUP_NO_EXCEPTIONS	.\src\3rdparty\libconfig\libconfigcpp.c++	864;"	d	file:
SIMULATE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	155;"	d	file:
SIMULATE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	16;"	d	file:
SIMULATE_ID	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	170;"	d	file:
SIMULATE_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	162;"	d	file:
SIMULATE_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	177;"	d	file:
SIMULATE_VERSION_MAJOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	32;"	d	file:
SIMULATE_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	38;"	d	file:
SIMULATE_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	163;"	d	file:
SIMULATE_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	178;"	d	file:
SIMULATE_VERSION_MINOR	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	33;"	d	file:
SQR	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1017;"	d
SQRT2	.\src\3rdparty\cvblobs\BlobProperties.cpp	18;"	d	file:
STRING	.\src\3rdparty\libconfig\scanner.c	629;"	d	file:
STRINGIFY	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	284;"	d	file:
STRINGIFY	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	289;"	d	file:
STRINGIFY_HELPER	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	283;"	d	file:
STRINGIFY_HELPER	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	288;"	d	file:
STRING_BLOCK_SIZE	.\src\3rdparty\libconfig\scanctx.c	30;"	d	file:
STRING_BLOCK_SIZE	.\src\3rdparty\libconfig\strbuf.c	28;"	d	file:
SUB_BEGIN	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1013;"	d
SUB_CALL	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1015;"	d
SUB_END	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1014;"	d
SUCCESS	.\src\opentld\main\Main.h	/^    SUCCESS = 1$/;"	e	enum:Retval
Setting	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API Setting$/;"	c	namespace:libconfig
Setting	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::Setting(config_setting_t *setting)$/;"	f	class:libconfig::Setting
SettingException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API SettingException : public ConfigException$/;"	c	namespace:libconfig
SettingException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException::SettingException(const Setting &setting)$/;"	f	class:libconfig::SettingException
SettingException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException::SettingException(const Setting &setting, const char *name)$/;"	f	class:libconfig::SettingException
SettingException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException::SettingException(const Setting &setting, int idx)$/;"	f	class:libconfig::SettingException
SettingException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException::SettingException(const SettingException &other)$/;"	f	class:libconfig::SettingException
SettingException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException::SettingException(const char *path)$/;"	f	class:libconfig::SettingException
SettingNameException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API SettingNameException : public SettingException$/;"	c	namespace:libconfig
SettingNameException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingNameException::SettingNameException(const Setting &setting,$/;"	f	class:libconfig::SettingNameException
SettingNotFoundException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API SettingNotFoundException : public SettingException$/;"	c	namespace:libconfig
SettingNotFoundException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingNotFoundException::SettingNotFoundException(const Setting &setting,$/;"	f	class:libconfig::SettingNotFoundException
SettingNotFoundException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingNotFoundException::SettingNotFoundException(const char *path)$/;"	f	class:libconfig::SettingNotFoundException
SettingTypeException	.\src\3rdparty\libconfig\libconfig.h++	/^class LIBCONFIGXX_API SettingTypeException : public SettingException$/;"	c	namespace:libconfig
SettingTypeException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingTypeException::SettingTypeException(const Setting &setting)$/;"	f	class:libconfig::SettingTypeException
SettingTypeException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingTypeException::SettingTypeException(const Setting &setting, int idx)$/;"	f	class:libconfig::SettingTypeException
SettingTypeException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingTypeException::SettingTypeException(const Setting &setting,$/;"	f	class:libconfig::SettingTypeException
Settings	.\src\opentld\main\Settings (copy).cpp	/^Settings::Settings() :$/;"	f	class:tld::Settings
Settings	.\src\opentld\main\Settings.cpp	/^Settings::Settings() :$/;"	f	class:tld::Settings
Settings	.\src\opentld\main\Settings.h	/^class Settings$/;"	c	namespace:tld
StdDev	.\src\3rdparty\cvblobs\blob.cpp	/^double CBlob::StdDev( IplImage *image )$/;"	f	class:CBlob
TLD	.\src\libopentld\tld\TLD.cpp	/^TLD::TLD()$/;"	f	class:tld::TLD
TLD	.\src\libopentld\tld\TLD.h	/^class TLD$/;"	c	namespace:tld
TLDUTIL_H_	.\src\libopentld\tld\TLDUtil.h	28;"	d
TLD_H_	.\src\libopentld\tld\TLD.h	28;"	d
TLD_PATCH_SIZE	.\src\libopentld\tld\detector\NormalizedPatch.h	29;"	d
TLD_WINDOW_OFFSET_SIZE	.\src\libopentld\tld\IDetectorCascade.h	/^static const int TLD_WINDOW_OFFSET_SIZE = 6;$/;"	m	namespace:tld
TLD_WINDOW_SIZE	.\src\libopentld\tld\IDetectorCascade.h	/^static const int TLD_WINDOW_SIZE = 5;$/;"	m	namespace:tld
TLD_WINDOW_SIZE	.\src\libopentld\tld\detector\cuda\CUDA.h	/^const int TLD_WINDOW_SIZE = 5;$/;"	v
TOK_ARRAY_END	.\src\3rdparty\libconfig\grammar.c	/^     TOK_ARRAY_END = 269,$/;"	e	enum:yytokentype	file:
TOK_ARRAY_END	.\src\3rdparty\libconfig\grammar.c	194;"	d	file:
TOK_ARRAY_END	.\src\3rdparty\libconfig\grammar.h	/^     TOK_ARRAY_END = 269,$/;"	e	enum:yytokentype
TOK_ARRAY_END	.\src\3rdparty\libconfig\grammar.h	76;"	d
TOK_ARRAY_START	.\src\3rdparty\libconfig\grammar.c	/^     TOK_ARRAY_START = 268,$/;"	e	enum:yytokentype	file:
TOK_ARRAY_START	.\src\3rdparty\libconfig\grammar.c	193;"	d	file:
TOK_ARRAY_START	.\src\3rdparty\libconfig\grammar.h	/^     TOK_ARRAY_START = 268,$/;"	e	enum:yytokentype
TOK_ARRAY_START	.\src\3rdparty\libconfig\grammar.h	75;"	d
TOK_BOOLEAN	.\src\3rdparty\libconfig\grammar.c	/^     TOK_BOOLEAN = 258,$/;"	e	enum:yytokentype	file:
TOK_BOOLEAN	.\src\3rdparty\libconfig\grammar.c	183;"	d	file:
TOK_BOOLEAN	.\src\3rdparty\libconfig\grammar.h	/^     TOK_BOOLEAN = 258,$/;"	e	enum:yytokentype
TOK_BOOLEAN	.\src\3rdparty\libconfig\grammar.h	65;"	d
TOK_COMMA	.\src\3rdparty\libconfig\grammar.c	/^     TOK_COMMA = 272,$/;"	e	enum:yytokentype	file:
TOK_COMMA	.\src\3rdparty\libconfig\grammar.c	197;"	d	file:
TOK_COMMA	.\src\3rdparty\libconfig\grammar.h	/^     TOK_COMMA = 272,$/;"	e	enum:yytokentype
TOK_COMMA	.\src\3rdparty\libconfig\grammar.h	79;"	d
TOK_EQUALS	.\src\3rdparty\libconfig\grammar.c	/^     TOK_EQUALS = 266,$/;"	e	enum:yytokentype	file:
TOK_EQUALS	.\src\3rdparty\libconfig\grammar.c	191;"	d	file:
TOK_EQUALS	.\src\3rdparty\libconfig\grammar.h	/^     TOK_EQUALS = 266,$/;"	e	enum:yytokentype
TOK_EQUALS	.\src\3rdparty\libconfig\grammar.h	73;"	d
TOK_ERROR	.\src\3rdparty\libconfig\grammar.c	/^     TOK_ERROR = 277$/;"	e	enum:yytokentype	file:
TOK_ERROR	.\src\3rdparty\libconfig\grammar.c	202;"	d	file:
TOK_ERROR	.\src\3rdparty\libconfig\grammar.h	/^     TOK_ERROR = 277$/;"	e	enum:yytokentype
TOK_ERROR	.\src\3rdparty\libconfig\grammar.h	84;"	d
TOK_FLOAT	.\src\3rdparty\libconfig\grammar.c	/^     TOK_FLOAT = 263,$/;"	e	enum:yytokentype	file:
TOK_FLOAT	.\src\3rdparty\libconfig\grammar.c	188;"	d	file:
TOK_FLOAT	.\src\3rdparty\libconfig\grammar.h	/^     TOK_FLOAT = 263,$/;"	e	enum:yytokentype
TOK_FLOAT	.\src\3rdparty\libconfig\grammar.h	70;"	d
TOK_GARBAGE	.\src\3rdparty\libconfig\grammar.c	/^     TOK_GARBAGE = 276,$/;"	e	enum:yytokentype	file:
TOK_GARBAGE	.\src\3rdparty\libconfig\grammar.c	201;"	d	file:
TOK_GARBAGE	.\src\3rdparty\libconfig\grammar.h	/^     TOK_GARBAGE = 276,$/;"	e	enum:yytokentype
TOK_GARBAGE	.\src\3rdparty\libconfig\grammar.h	83;"	d
TOK_GROUP_END	.\src\3rdparty\libconfig\grammar.c	/^     TOK_GROUP_END = 274,$/;"	e	enum:yytokentype	file:
TOK_GROUP_END	.\src\3rdparty\libconfig\grammar.c	199;"	d	file:
TOK_GROUP_END	.\src\3rdparty\libconfig\grammar.h	/^     TOK_GROUP_END = 274,$/;"	e	enum:yytokentype
TOK_GROUP_END	.\src\3rdparty\libconfig\grammar.h	81;"	d
TOK_GROUP_START	.\src\3rdparty\libconfig\grammar.c	/^     TOK_GROUP_START = 273,$/;"	e	enum:yytokentype	file:
TOK_GROUP_START	.\src\3rdparty\libconfig\grammar.c	198;"	d	file:
TOK_GROUP_START	.\src\3rdparty\libconfig\grammar.h	/^     TOK_GROUP_START = 273,$/;"	e	enum:yytokentype
TOK_GROUP_START	.\src\3rdparty\libconfig\grammar.h	80;"	d
TOK_HEX	.\src\3rdparty\libconfig\grammar.c	/^     TOK_HEX = 260,$/;"	e	enum:yytokentype	file:
TOK_HEX	.\src\3rdparty\libconfig\grammar.c	185;"	d	file:
TOK_HEX	.\src\3rdparty\libconfig\grammar.h	/^     TOK_HEX = 260,$/;"	e	enum:yytokentype
TOK_HEX	.\src\3rdparty\libconfig\grammar.h	67;"	d
TOK_HEX64	.\src\3rdparty\libconfig\grammar.c	/^     TOK_HEX64 = 262,$/;"	e	enum:yytokentype	file:
TOK_HEX64	.\src\3rdparty\libconfig\grammar.c	187;"	d	file:
TOK_HEX64	.\src\3rdparty\libconfig\grammar.h	/^     TOK_HEX64 = 262,$/;"	e	enum:yytokentype
TOK_HEX64	.\src\3rdparty\libconfig\grammar.h	69;"	d
TOK_INTEGER	.\src\3rdparty\libconfig\grammar.c	/^     TOK_INTEGER = 259,$/;"	e	enum:yytokentype	file:
TOK_INTEGER	.\src\3rdparty\libconfig\grammar.c	184;"	d	file:
TOK_INTEGER	.\src\3rdparty\libconfig\grammar.h	/^     TOK_INTEGER = 259,$/;"	e	enum:yytokentype
TOK_INTEGER	.\src\3rdparty\libconfig\grammar.h	66;"	d
TOK_INTEGER64	.\src\3rdparty\libconfig\grammar.c	/^     TOK_INTEGER64 = 261,$/;"	e	enum:yytokentype	file:
TOK_INTEGER64	.\src\3rdparty\libconfig\grammar.c	186;"	d	file:
TOK_INTEGER64	.\src\3rdparty\libconfig\grammar.h	/^     TOK_INTEGER64 = 261,$/;"	e	enum:yytokentype
TOK_INTEGER64	.\src\3rdparty\libconfig\grammar.h	68;"	d
TOK_LIST_END	.\src\3rdparty\libconfig\grammar.c	/^     TOK_LIST_END = 271,$/;"	e	enum:yytokentype	file:
TOK_LIST_END	.\src\3rdparty\libconfig\grammar.c	196;"	d	file:
TOK_LIST_END	.\src\3rdparty\libconfig\grammar.h	/^     TOK_LIST_END = 271,$/;"	e	enum:yytokentype
TOK_LIST_END	.\src\3rdparty\libconfig\grammar.h	78;"	d
TOK_LIST_START	.\src\3rdparty\libconfig\grammar.c	/^     TOK_LIST_START = 270,$/;"	e	enum:yytokentype	file:
TOK_LIST_START	.\src\3rdparty\libconfig\grammar.c	195;"	d	file:
TOK_LIST_START	.\src\3rdparty\libconfig\grammar.h	/^     TOK_LIST_START = 270,$/;"	e	enum:yytokentype
TOK_LIST_START	.\src\3rdparty\libconfig\grammar.h	77;"	d
TOK_NAME	.\src\3rdparty\libconfig\grammar.c	/^     TOK_NAME = 265,$/;"	e	enum:yytokentype	file:
TOK_NAME	.\src\3rdparty\libconfig\grammar.c	190;"	d	file:
TOK_NAME	.\src\3rdparty\libconfig\grammar.h	/^     TOK_NAME = 265,$/;"	e	enum:yytokentype
TOK_NAME	.\src\3rdparty\libconfig\grammar.h	72;"	d
TOK_NEWLINE	.\src\3rdparty\libconfig\grammar.c	/^     TOK_NEWLINE = 267,$/;"	e	enum:yytokentype	file:
TOK_NEWLINE	.\src\3rdparty\libconfig\grammar.c	192;"	d	file:
TOK_NEWLINE	.\src\3rdparty\libconfig\grammar.h	/^     TOK_NEWLINE = 267,$/;"	e	enum:yytokentype
TOK_NEWLINE	.\src\3rdparty\libconfig\grammar.h	74;"	d
TOK_SEMICOLON	.\src\3rdparty\libconfig\grammar.c	/^     TOK_SEMICOLON = 275,$/;"	e	enum:yytokentype	file:
TOK_SEMICOLON	.\src\3rdparty\libconfig\grammar.c	200;"	d	file:
TOK_SEMICOLON	.\src\3rdparty\libconfig\grammar.h	/^     TOK_SEMICOLON = 275,$/;"	e	enum:yytokentype
TOK_SEMICOLON	.\src\3rdparty\libconfig\grammar.h	82;"	d
TOK_STRING	.\src\3rdparty\libconfig\grammar.c	/^     TOK_STRING = 264,$/;"	e	enum:yytokentype	file:
TOK_STRING	.\src\3rdparty\libconfig\grammar.c	189;"	d	file:
TOK_STRING	.\src\3rdparty\libconfig\grammar.h	/^     TOK_STRING = 264,$/;"	e	enum:yytokentype
TOK_STRING	.\src\3rdparty\libconfig\grammar.h	71;"	d
TRAJECTORY_H_	.\src\opentld\main\Trajectory.h	21;"	d
TldExportEntry	.\src\libopentld\tld\TLD.cpp	/^} TldExportEntry;$/;"	t	namespace:tld	typeref:struct:tld::__anon5	file:
Trajectory	.\src\opentld\main\Trajectory.cpp	/^Trajectory::Trajectory()$/;"	f	class:tld::Trajectory
Trajectory	.\src\opentld\main\Trajectory.h	/^class Trajectory$/;"	c	namespace:tld
Type	.\src\3rdparty\libconfig\libconfig.h++	/^  enum Type$/;"	g	class:libconfig::Setting
TypeArray	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeArray,$/;"	e	enum:libconfig::Setting::Type
TypeBoolean	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeBoolean,$/;"	e	enum:libconfig::Setting::Type
TypeFloat	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeFloat,$/;"	e	enum:libconfig::Setting::Type
TypeGroup	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeGroup,$/;"	e	enum:libconfig::Setting::Type
TypeInt	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeInt,$/;"	e	enum:libconfig::Setting::Type
TypeInt64	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeInt64,$/;"	e	enum:libconfig::Setting::Type
TypeList	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeList$/;"	e	enum:libconfig::Setting::Type
TypeNone	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeNone = 0,$/;"	e	enum:libconfig::Setting::Type
TypeString	.\src\3rdparty\libconfig\libconfig.h++	/^    TypeString,$/;"	e	enum:libconfig::Setting::Type
UINT16_MAX	.\src\3rdparty\libconfig\scanner.c	81;"	d	file:
UINT16_MAX	.\src\3rdparty\libconfig\scanner.h	86;"	d
UINT32_MAX	.\src\3rdparty\libconfig\scanner.c	84;"	d	file:
UINT32_MAX	.\src\3rdparty\libconfig\scanner.h	89;"	d
UINT64_CONST	.\src\3rdparty\libconfig\wincompat.h	73;"	d
UINT64_CONST	.\src\3rdparty\libconfig\wincompat.h	86;"	d
UINT64_FMT	.\src\3rdparty\libconfig\wincompat.h	52;"	d
UINT64_FMT	.\src\3rdparty\libconfig\wincompat.h	61;"	d
UINT8_MAX	.\src\3rdparty\libconfig\scanner.c	78;"	d	file:
UINT8_MAX	.\src\3rdparty\libconfig\scanner.h	83;"	d
VARIANCEFILTER_H_	.\src\libopentld\tld\detector\VarianceFilter.h	30;"	d
VAR_FILT_BLOCK_SIZE	.\src\libopentld\tld\detector\cuda\CUDA.h	11;"	d
VarianceFilter	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^VarianceFilter::VarianceFilter()$/;"	f	class:tld::VarianceFilter
VarianceFilter	.\src\libopentld\tld\detector\VarianceFilter.h	/^class VarianceFilter : public IVarianceFilter$/;"	c	namespace:tld
WIN32_LEAN_AND_MEAN	.\src\3rdparty\libconfig\wincompat.h	32;"	d
WIN32_LEAN_AND_MEAN	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	53;"	d
YYABORT	.\src\3rdparty\libconfig\grammar.c	657;"	d	file:
YYACCEPT	.\src\3rdparty\libconfig\grammar.c	656;"	d	file:
YYBACKUP	.\src\3rdparty\libconfig\grammar.c	669;"	d	file:
YYBISON	.\src\3rdparty\libconfig\grammar.c	46;"	d	file:
YYBISON_VERSION	.\src\3rdparty\libconfig\grammar.c	49;"	d	file:
YYCOPY	.\src\3rdparty\libconfig\grammar.c	414;"	d	file:
YYCOPY	.\src\3rdparty\libconfig\grammar.c	417;"	d	file:
YYDEBUG	.\src\3rdparty\libconfig\grammar.c	137;"	d	file:
YYDPRINTF	.\src\3rdparty\libconfig\grammar.c	749;"	d	file:
YYDPRINTF	.\src\3rdparty\libconfig\grammar.c	910;"	d	file:
YYEMPTY	.\src\3rdparty\libconfig\grammar.c	653;"	d	file:
YYEOF	.\src\3rdparty\libconfig\grammar.c	654;"	d	file:
YYERRCODE	.\src\3rdparty\libconfig\grammar.c	688;"	d	file:
YYERROR	.\src\3rdparty\libconfig\grammar.c	658;"	d	file:
YYERROR_VERBOSE	.\src\3rdparty\libconfig\grammar.c	142;"	d	file:
YYERROR_VERBOSE	.\src\3rdparty\libconfig\grammar.c	143;"	d	file:
YYERROR_VERBOSE	.\src\3rdparty\libconfig\grammar.c	145;"	d	file:
YYFAIL	.\src\3rdparty\libconfig\grammar.c	665;"	d	file:
YYFINAL	.\src\3rdparty\libconfig\grammar.c	447;"	d	file:
YYFPRINTF	.\src\3rdparty\libconfig\grammar.c	746;"	d	file:
YYFREE	.\src\3rdparty\libconfig\grammar.c	380;"	d	file:
YYID	.\src\3rdparty\libconfig\grammar.c	/^YYID (int yyi)$/;"	f	file:
YYID	.\src\3rdparty\libconfig\grammar.c	304;"	d	file:
YYINITDEPTH	.\src\3rdparty\libconfig\grammar.c	919;"	d	file:
YYLAST	.\src\3rdparty\libconfig\grammar.c	449;"	d	file:
YYLEX	.\src\3rdparty\libconfig\grammar.c	736;"	d	file:
YYLEX	.\src\3rdparty\libconfig\grammar.c	738;"	d	file:
YYLLOC_DEFAULT	.\src\3rdparty\libconfig\grammar.c	697;"	d	file:
YYLSP_NEEDED	.\src\3rdparty\libconfig\grammar.c	64;"	d	file:
YYMALLOC	.\src\3rdparty\libconfig\grammar.c	373;"	d	file:
YYMAXDEPTH	.\src\3rdparty\libconfig\grammar.c	930;"	d	file:
YYMAXUTOK	.\src\3rdparty\libconfig\grammar.c	462;"	d	file:
YYNNTS	.\src\3rdparty\libconfig\grammar.c	454;"	d	file:
YYNRULES	.\src\3rdparty\libconfig\grammar.c	456;"	d	file:
YYNSTATES	.\src\3rdparty\libconfig\grammar.c	458;"	d	file:
YYNTOKENS	.\src\3rdparty\libconfig\grammar.c	452;"	d	file:
YYPACT_NINF	.\src\3rdparty\libconfig\grammar.c	602;"	d	file:
YYPOPSTACK	.\src\3rdparty\libconfig\grammar.c	1277;"	d	file:
YYPULL	.\src\3rdparty\libconfig\grammar.c	61;"	d	file:
YYPURE	.\src\3rdparty\libconfig\grammar.c	55;"	d	file:
YYPUSH	.\src\3rdparty\libconfig\grammar.c	58;"	d	file:
YYRECOVERING	.\src\3rdparty\libconfig\grammar.c	667;"	d	file:
YYRHSLOC	.\src\3rdparty\libconfig\grammar.c	695;"	d	file:
YYSIZE_MAXIMUM	.\src\3rdparty\libconfig\grammar.c	281;"	d	file:
YYSIZE_T	.\src\3rdparty\libconfig\grammar.c	269;"	d	file:
YYSIZE_T	.\src\3rdparty\libconfig\grammar.c	271;"	d	file:
YYSIZE_T	.\src\3rdparty\libconfig\grammar.c	275;"	d	file:
YYSIZE_T	.\src\3rdparty\libconfig\grammar.c	277;"	d	file:
YYSKELETON_NAME	.\src\3rdparty\libconfig\grammar.c	52;"	d	file:
YYSTACK_ALLOC	.\src\3rdparty\libconfig\grammar.c	327;"	d	file:
YYSTACK_ALLOC	.\src\3rdparty\libconfig\grammar.c	331;"	d	file:
YYSTACK_ALLOC	.\src\3rdparty\libconfig\grammar.c	336;"	d	file:
YYSTACK_ALLOC	.\src\3rdparty\libconfig\grammar.c	359;"	d	file:
YYSTACK_ALLOC_MAXIMUM	.\src\3rdparty\libconfig\grammar.c	356;"	d	file:
YYSTACK_ALLOC_MAXIMUM	.\src\3rdparty\libconfig\grammar.c	362;"	d	file:
YYSTACK_BYTES	.\src\3rdparty\libconfig\grammar.c	406;"	d	file:
YYSTACK_FREE	.\src\3rdparty\libconfig\grammar.c	350;"	d	file:
YYSTACK_FREE	.\src\3rdparty\libconfig\grammar.c	360;"	d	file:
YYSTACK_GAP_MAXIMUM	.\src\3rdparty\libconfig\grammar.c	402;"	d	file:
YYSTACK_RELOCATE	.\src\3rdparty\libconfig\grammar.c	433;"	d	file:
YYSTATE	.\src\3rdparty\libconfig\scanner.c	150;"	d	file:
YYSTYPE	.\src\3rdparty\libconfig\grammar.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	.\src\3rdparty\libconfig\grammar.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	.\src\3rdparty\libconfig\grammar.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	.\src\3rdparty\libconfig\grammar.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	.\src\3rdparty\libconfig\grammar.c	226;"	d	file:
YYSTYPE_IS_DECLARED	.\src\3rdparty\libconfig\grammar.h	108;"	d
YYSTYPE_IS_TRIVIAL	.\src\3rdparty\libconfig\grammar.c	224;"	d	file:
YYSTYPE_IS_TRIVIAL	.\src\3rdparty\libconfig\grammar.h	106;"	d
YYTABLES_NAME	.\src\3rdparty\libconfig\scanner.c	2360;"	d	file:
YYTABLE_NINF	.\src\3rdparty\libconfig\grammar.c	623;"	d	file:
YYTERROR	.\src\3rdparty\libconfig\grammar.c	687;"	d	file:
YYTOKENTYPE	.\src\3rdparty\libconfig\grammar.c	156;"	d	file:
YYTOKENTYPE	.\src\3rdparty\libconfig\grammar.h	38;"	d
YYTOKEN_TABLE	.\src\3rdparty\libconfig\grammar.c	150;"	d	file:
YYTRANSLATE	.\src\3rdparty\libconfig\grammar.c	464;"	d	file:
YYUNDEFTOK	.\src\3rdparty\libconfig\grammar.c	461;"	d	file:
YYUSE	.\src\3rdparty\libconfig\grammar.c	297;"	d	file:
YYUSE	.\src\3rdparty\libconfig\grammar.c	299;"	d	file:
YY_	.\src\3rdparty\libconfig\grammar.c	287;"	d	file:
YY_	.\src\3rdparty\libconfig\grammar.c	291;"	d	file:
YY_AT_BOL	.\src\3rdparty\libconfig\scanner.c	346;"	d	file:
YY_BREAK	.\src\3rdparty\libconfig\scanner.c	847;"	d	file:
YY_BUFFER_EOF_PENDING	.\src\3rdparty\libconfig\scanner.c	282;"	d	file:
YY_BUFFER_NEW	.\src\3rdparty\libconfig\scanner.c	270;"	d	file:
YY_BUFFER_NORMAL	.\src\3rdparty\libconfig\scanner.c	271;"	d	file:
YY_BUFFER_STATE	.\src\3rdparty\libconfig\scanner.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUFFER_STATE	.\src\3rdparty\libconfig\scanner.h	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state
YY_BUF_SIZE	.\src\3rdparty\libconfig\scanner.c	167;"	d	file:
YY_BUF_SIZE	.\src\3rdparty\libconfig\scanner.c	169;"	d	file:
YY_CHAR	.\src\3rdparty\libconfig\scanner.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	.\src\3rdparty\libconfig\scanner.c	293;"	d	file:
YY_CURRENT_BUFFER_LVALUE	.\src\3rdparty\libconfig\scanner.c	300;"	d	file:
YY_DECL	.\src\3rdparty\libconfig\scanner.c	834;"	d	file:
YY_DECL	.\src\3rdparty\libconfig\scanner.h	305;"	d
YY_DECL	.\src\3rdparty\libconfig\scanner.h	319;"	d
YY_DECL_IS_OURS	.\src\3rdparty\libconfig\scanner.c	829;"	d	file:
YY_DECL_IS_OURS	.\src\3rdparty\libconfig\scanner.h	301;"	d
YY_DECL_IS_OURS	.\src\3rdparty\libconfig\scanner.h	318;"	d
YY_DO_BEFORE_ACTION	.\src\3rdparty\libconfig\scanner.c	365;"	d	file:
YY_DO_BEFORE_ACTION	.\src\3rdparty\libconfig\scanner.h	315;"	d
YY_END_OF_BUFFER	.\src\3rdparty\libconfig\scanner.c	373;"	d	file:
YY_END_OF_BUFFER_CHAR	.\src\3rdparty\libconfig\scanner.c	158;"	d	file:
YY_EXIT_FAILURE	.\src\3rdparty\libconfig\scanner.c	2003;"	d	file:
YY_EXTRA_TYPE	.\src\3rdparty\libconfig\scanner.c	640;"	d	file:
YY_EXTRA_TYPE	.\src\3rdparty\libconfig\scanner.h	227;"	d
YY_FATAL_ERROR	.\src\3rdparty\libconfig\scanner.c	820;"	d	file:
YY_FLEX_MAJOR_VERSION	.\src\3rdparty\libconfig\scanner.c	10;"	d	file:
YY_FLEX_MAJOR_VERSION	.\src\3rdparty\libconfig\scanner.h	14;"	d
YY_FLEX_MINOR_VERSION	.\src\3rdparty\libconfig\scanner.c	11;"	d	file:
YY_FLEX_MINOR_VERSION	.\src\3rdparty\libconfig\scanner.h	15;"	d
YY_FLEX_SUBMINOR_VERSION	.\src\3rdparty\libconfig\scanner.c	12;"	d	file:
YY_FLEX_SUBMINOR_VERSION	.\src\3rdparty\libconfig\scanner.h	16;"	d
YY_FLUSH_BUFFER	.\src\3rdparty\libconfig\scanner.c	314;"	d	file:
YY_FLUSH_BUFFER	.\src\3rdparty\libconfig\scanner.h	311;"	d
YY_INPUT	.\src\3rdparty\libconfig\scanner.c	773;"	d	file:
YY_INT_ALIGNED	.\src\3rdparty\libconfig\scanner.c	5;"	d	file:
YY_INT_ALIGNED	.\src\3rdparty\libconfig\scanner.h	9;"	d
YY_LESS_LINENO	.\src\3rdparty\libconfig\scanner.c	193;"	d	file:
YY_LOCATION_PRINT	.\src\3rdparty\libconfig\grammar.c	723;"	d	file:
YY_LOCATION_PRINT	.\src\3rdparty\libconfig\grammar.c	728;"	d	file:
YY_MORE_ADJ	.\src\3rdparty\libconfig\scanner.c	548;"	d	file:
YY_NEW_FILE	.\src\3rdparty\libconfig\scanner.c	156;"	d	file:
YY_NEW_FILE	.\src\3rdparty\libconfig\scanner.h	310;"	d
YY_NO_INPUT	.\src\3rdparty\libconfig\scanner.c	588;"	d	file:
YY_NO_UNISTD_H	.\src\3rdparty\libconfig\scanner.c	573;"	d	file:
YY_NULL	.\src\3rdparty\libconfig\scanner.c	113;"	d	file:
YY_NUM_RULES	.\src\3rdparty\libconfig\scanner.c	372;"	d	file:
YY_READ_BUF_SIZE	.\src\3rdparty\libconfig\scanner.c	755;"	d	file:
YY_READ_BUF_SIZE	.\src\3rdparty\libconfig\scanner.c	757;"	d	file:
YY_READ_BUF_SIZE	.\src\3rdparty\libconfig\scanner.h	289;"	d
YY_REDUCE_PRINT	.\src\3rdparty\libconfig\grammar.c	900;"	d	file:
YY_REDUCE_PRINT	.\src\3rdparty\libconfig\grammar.c	913;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	.\src\3rdparty\libconfig\scanner.c	549;"	d	file:
YY_RULE_SETUP	.\src\3rdparty\libconfig\scanner.c	850;"	d	file:
YY_SC_TO_UI	.\src\3rdparty\libconfig\scanner.c	120;"	d	file:
YY_SKIP_YYWRAP	.\src\3rdparty\libconfig\scanner.c	349;"	d	file:
YY_SKIP_YYWRAP	.\src\3rdparty\libconfig\scanner.h	216;"	d
YY_STACK_PRINT	.\src\3rdparty\libconfig\grammar.c	859;"	d	file:
YY_STACK_PRINT	.\src\3rdparty\libconfig\grammar.c	912;"	d	file:
YY_START	.\src\3rdparty\libconfig\scanner.c	149;"	d	file:
YY_START_STACK_INCR	.\src\3rdparty\libconfig\scanner.c	815;"	d	file:
YY_START_STACK_INCR	.\src\3rdparty\libconfig\scanner.h	294;"	d
YY_STATE_BUF_SIZE	.\src\3rdparty\libconfig\scanner.c	175;"	d	file:
YY_STATE_EOF	.\src\3rdparty\libconfig\scanner.c	153;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	.\src\3rdparty\libconfig\scanner.c	223;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	.\src\3rdparty\libconfig\scanner.h	149;"	d
YY_SYMBOL_PRINT	.\src\3rdparty\libconfig\grammar.c	755;"	d	file:
YY_SYMBOL_PRINT	.\src\3rdparty\libconfig\grammar.c	911;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	.\src\3rdparty\libconfig\scanner.c	178;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	.\src\3rdparty\libconfig\scanner.h	134;"	d
YY_TYPEDEF_YY_SCANNER_T	.\src\3rdparty\libconfig\scanner.c	124;"	d	file:
YY_TYPEDEF_YY_SCANNER_T	.\src\3rdparty\libconfig\scanner.h	116;"	d
YY_TYPEDEF_YY_SIZE_T	.\src\3rdparty\libconfig\scanner.c	218;"	d	file:
YY_TYPEDEF_YY_SIZE_T	.\src\3rdparty\libconfig\scanner.h	144;"	d
YY_USER_ACTION	.\src\3rdparty\libconfig\scanner.c	842;"	d	file:
YY_USE_CONST	.\src\3rdparty\libconfig\scanner.c	101;"	d	file:
YY_USE_CONST	.\src\3rdparty\libconfig\scanner.c	94;"	d	file:
YY_USE_CONST	.\src\3rdparty\libconfig\scanner.h	103;"	d
YY_USE_CONST	.\src\3rdparty\libconfig\scanner.h	97;"	d
_CLASSE_BLOBRESULT_INCLUDED	.\src\3rdparty\cvblobs\BlobResult.h	16;"	d
_CLASSE_BLOBRESULT_INCLUDED	.\src\3rdparty\cvblobs\ComponentLabeling.h	2;"	d
_CU_ENSEMBLECLASSIFIER_H_	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	21;"	d
_CU_VARIANCEFILTER_H_	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	21;"	d
_STDLIB_H	.\src\3rdparty\libconfig\grammar.c	341;"	d	file:
_STDLIB_H	.\src\3rdparty\libconfig\grammar.c	369;"	d	file:
_STDLIB_H	.\src\3rdparty\libconfig\grammar.c	89;"	d	file:
_TIMING_H_	.\src\libopentld\tld\Timing.h	2;"	d
__STDC_LIMIT_MACROS	.\src\3rdparty\libconfig\scanner.c	40;"	d	file:
__STDC_LIMIT_MACROS	.\src\3rdparty\libconfig\scanner.h	44;"	d
__align__	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	106;"	d
__config_indent	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_indent(FILE *stream, int depth, unsigned short w)$/;"	f	file:
__config_list_add	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_list_add(config_list_t *list, config_setting_t *setting)$/;"	f	file:
__config_list_destroy	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_list_destroy(config_list_t *list)$/;"	f	file:
__config_list_remove	.\src\3rdparty\libconfig\libconfig.c	/^static config_setting_t *__config_list_remove(config_list_t *list, int idx)$/;"	f	file:
__config_list_search	.\src\3rdparty\libconfig\libconfig.c	/^static config_setting_t *__config_list_search(config_list_t *list,$/;"	f	file:
__config_locale_override	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_locale_override(void)$/;"	f	file:
__config_locale_restore	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_locale_restore(void)$/;"	f	file:
__config_name_compare	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_name_compare(const char *a, const char *b)$/;"	f	file:
__config_read	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_read(config_t *config, FILE *stream, const char *filename,$/;"	f	file:
__config_setting_destroy	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_setting_destroy(config_setting_t *setting)$/;"	f	file:
__config_setting_get_float	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_setting_get_float(const config_setting_t *setting,$/;"	f	file:
__config_setting_get_int	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_setting_get_int(const config_setting_t *setting,$/;"	f	file:
__config_setting_get_int64	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_setting_get_int64(const config_setting_t *setting,$/;"	f	file:
__config_validate_name	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_validate_name(const char *name)$/;"	f	file:
__config_vector_checktype	.\src\3rdparty\libconfig\libconfig.c	/^static int __config_vector_checktype(const config_setting_t *vector, int type)$/;"	f	file:
__config_write_setting	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_write_setting(const config_setting_t *setting,$/;"	f	file:
__config_write_value	.\src\3rdparty\libconfig\libconfig.c	/^static void __config_write_value(const config_value_t *value, int type,$/;"	f	file:
__constructPath	.\src\3rdparty\libconfig\libconfigcpp.c++	/^static void __constructPath(const Setting &setting,$/;"	f	namespace:libconfig
__io_error	.\src\3rdparty\libconfig\libconfig.c	/^static const char *__io_error = "file I\/O error";$/;"	v	file:
__libconfig_h	.\src\3rdparty\libconfig\libconfig.h	24;"	d
__libconfig_hpp	.\src\3rdparty\libconfig\libconfig.h++	24;"	d
__libconfig_parsectx_h	.\src\3rdparty\libconfig\parsectx.h	24;"	d
__libconfig_scanctx_h	.\src\3rdparty\libconfig\scanctx.h	24;"	d
__libconfig_strbuf_h	.\src\3rdparty\libconfig\strbuf.h	24;"	d
__scanctx_add_filename	.\src\3rdparty\libconfig\scanctx.c	/^static const char *__scanctx_add_filename(struct scan_context *ctx,$/;"	f	file:
__toTypeCode	.\src\3rdparty\libconfig\libconfigcpp.c++	/^static int __toTypeCode(Setting::Type type)$/;"	f	namespace:libconfig
__wincompat_h	.\src\3rdparty\libconfig\wincompat.h	24;"	d
_alignment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u _alignment;$/;"	m	class:NCVMemNativeAllocator
_alignment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u _alignment;$/;"	m	class:NCVMemStackAllocator
_config	.\src\3rdparty\libconfig\libconfig.h++	/^  config_t *_config;$/;"	m	class:libconfig::Config
_defaultFormat	.\src\3rdparty\libconfig\libconfig.h++	/^  Setting::Format _defaultFormat;$/;"	m	class:libconfig::Config
_delete	.\src\3rdparty\libconfig\grammar.c	104;"	d	file:
_delete	.\src\3rdparty\libconfig\libconfig.c	49;"	d	file:
_error	.\src\3rdparty\libconfig\libconfig.h++	/^  const char *_error;$/;"	m	class:libconfig::ParseException
_file	.\src\3rdparty\libconfig\libconfig.h++	/^  const char *_file;$/;"	m	class:libconfig::ParseException
_format	.\src\3rdparty\libconfig\libconfig.h++	/^  Format _format;$/;"	m	class:libconfig::Setting
_height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u _height;$/;"	m	class:NCVMatrix
_length	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t _length;$/;"	m	class:NCVVector
_line	.\src\3rdparty\libconfig\libconfig.h++	/^  int _line;$/;"	m	class:libconfig::ParseException
_maxSize	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t _maxSize;$/;"	m	class:NCVMemNativeAllocator
_maxSize	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t _maxSize;$/;"	m	class:NCVMemStackAllocator
_memType	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType _memType;$/;"	m	class:NCVMemNativeAllocator
_memType	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType _memType;$/;"	m	class:NCVMemStackAllocator
_memtype	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType _memtype;$/;"	m	class:NCVMatrix
_memtype	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType _memtype;$/;"	m	class:NCVVector
_ncv_hpp_	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	44;"	d
_new	.\src\3rdparty\libconfig\libconfig.c	48;"	d	file:
_npp_staging_hpp_	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	44;"	d
_path	.\src\3rdparty\libconfig\libconfig.h++	/^  char *_path;$/;"	m	class:libconfig::SettingException
_pitch	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u _pitch;$/;"	m	class:NCVMatrix
_ptr	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    T *_ptr;$/;"	m	class:NCVMatrix
_ptr	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    T *_ptr;$/;"	m	class:NCVVector
_setting	.\src\3rdparty\libconfig\libconfig.h++	/^  config_setting_t *_setting;$/;"	m	class:libconfig::Setting
_type	.\src\3rdparty\libconfig\libconfig.h++	/^  Type _type;$/;"	m	class:libconfig::Setting
_width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u _width;$/;"	m	class:NCVMatrix
add	.\src\3rdparty\libconfig\libconfig.h++	/^  inline Setting & add(const std::string & name, Type type)$/;"	f	class:libconfig::Setting
add	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::add(Setting::Type type) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
add	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::add(const char *name, Setting::Type type)$/;"	f	class:libconfig::Setting
addPoint	.\src\opentld\main\Trajectory.cpp	/^void Trajectory::addPoint(CvPoint point, CvScalar color)$/;"	f	class:tld::Trajectory
allocBegin	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u *allocBegin;$/;"	m	class:NCVMemStackAllocator
alloca	.\src\3rdparty\libconfig\grammar.c	334;"	d	file:
allocatedMem	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemSegment allocatedMem;$/;"	m	class:NCVMatrixAlloc
allocatedMem	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemSegment allocatedMem;$/;"	m	class:NCVVectorAlloc
allocator	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    INCVMemAllocator &allocator;$/;"	m	class:NCVMatrixAlloc
allocator	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    INCVMemAllocator &allocator;$/;"	m	class:NCVVectorAlloc
alternating	.\src\libopentld\tld\TLD.h	/^    bool alternating;$/;"	m	class:tld::TLD
assertTest	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    struct assertTest{};$/;"	s	namespace:NcvCTprep
assertType	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Setting::assertType(Setting::Type type) const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
at	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    T& at(Ncv32u x, Ncv32u y) const$/;"	f	class:NCVMatrix
atoll	.\src\3rdparty\libconfig\wincompat.h	38;"	d
bReused	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool bReused;$/;"	m	class:NCVMatrixReuse
bReused	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool bReused;$/;"	m	class:NCVVectorReuse
bReusesMemory	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool bReusesMemory;$/;"	m	class:NCVMemStackAllocator
bb	.\src\opentld\main\Gui.cpp	/^static CvRect *bb;$/;"	m	namespace:tld	file:
begin	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemPtr begin;$/;"	m	struct:NCVMemSegment
begin	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u *begin;$/;"	m	class:NCVMemStackAllocator
bgImg	.\src\libopentld\tld\detector\ForegroundDetector.h	/^    cv::Mat bgImg;$/;"	m	class:tld::ForegroundDetector
buffers	.\src\3rdparty\libconfig\scanctx.h	/^  void *buffers[MAX_INCLUDE_DEPTH];$/;"	m	struct:scan_context
c_str	.\src\3rdparty\libconfig\libconfig.h++	/^  inline const char *c_str() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
calcConfidence	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^float EnsembleClassifier::calcConfidence(int *featureVector)$/;"	f	class:tld::EnsembleClassifier
calcDistances	.\src\libopentld\tld\Clustering.cpp	/^void Clustering::calcDistances(float *distances)$/;"	f	class:tld::Clustering
calcFeatureVector	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::calcFeatureVector(int windowIdx, int *featureVector)$/;"	f	class:tld::EnsembleClassifier
calcFernFeature	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^int EnsembleClassifier::calcFernFeature(int windowIdx, int treeIdx)$/;"	f	class:tld::EnsembleClassifier
calcIntImg	.\src\libopentld\tld\detector\IntegralImage.h	/^    void calcIntImg(const cv::Mat &img, bool squared = false)$/;"	f	class:tld::IntegralImage
calcMeanRect	.\src\libopentld\tld\Clustering.cpp	/^void Clustering::calcMeanRect(vector<int> * indices)$/;"	f	class:tld::Clustering
calcVariance	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^float VarianceFilter::calcVariance(int *off)$/;"	f	class:tld::VarianceFilter
calculateBBCenter	.\src\libopentld\mftracker\BB.cpp	/^int calculateBBCenter(float bb[4], float center[2])$/;"	f
camNo	.\src\libopentld\imacq\ImAcq.h	/^    int camNo;$/;"	m	struct:__anon3
capacity	.\src\3rdparty\libconfig\strbuf.h	/^  size_t capacity;$/;"	m	struct:__anon2
capture	.\src\libopentld\imacq\ImAcq.h	/^    CvCapture *capture;$/;"	m	struct:__anon3
capture_parse_pos	.\src\3rdparty\libconfig\grammar.c	/^static void capture_parse_pos(void *scanner, struct scan_context *scan_ctx,$/;"	f	file:
changeEvent	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::changeEvent(QEvent *e)$/;"	f	class:ConfigDialog
classifyBB	.\src\libopentld\tld\detector\NNClassifier.cpp	/^float NNClassifier::classifyBB(const Mat &img, Rect *bb)$/;"	f	class:tld::NNClassifier
classifyPatch	.\src\libopentld\tld\detector\NNClassifier.cpp	/^float NNClassifier::classifyPatch(NormalizedPatch *patch)$/;"	f	class:tld::NNClassifier
classifyWindow	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::classifyWindow(int windowIdx)$/;"	f	class:tld::EnsembleClassifier
classifyWindow	.\src\libopentld\tld\detector\NNClassifier.cpp	/^float NNClassifier::classifyWindow(const Mat &img, int windowIdx)$/;"	f	class:tld::NNClassifier
cleanPreviousData	.\src\libopentld\tld\MedianFlowTracker.cpp	/^void MedianFlowTracker::cleanPreviousData()$/;"	f	class:tld::MedianFlowTracker
cleanPreviousData	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::cleanPreviousData()$/;"	f	class:tld::DetectorCascade
cleanPreviousData	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::cleanPreviousData()$/;"	f	class:tld::cuda::CuDetectorCascade
clear	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    void clear()$/;"	f	class:NCVMatrix
clear	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    void clear()$/;"	f	class:NCVVector
cluster	.\src\libopentld\tld\Clustering.cpp	/^void Clustering::cluster(float *distances, int *clusterIndices)$/;"	f	class:tld::Clustering
clusterConfidentIndices	.\src\libopentld\tld\Clustering.cpp	/^void Clustering::clusterConfidentIndices()$/;"	f	class:tld::Clustering
clustering	.\src\libopentld\tld\IDetectorCascade.h	/^    Clustering *clustering;$/;"	m	class:tld::IDetectorCascade
confidences_d	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^    float *confidences_d;$/;"	m	class:tld::cuda::CuEnsembleClassifier
confidentIndices	.\src\libopentld\tld\DetectionResult.h	/^    std::vector<int>* confidentIndices;$/;"	m	class:tld::DetectionResult
config	.\src\3rdparty\libconfig\libconfig.h	/^  struct config_t *config;$/;"	m	struct:config_setting_t	typeref:struct:config_setting_t::config_t
config	.\src\3rdparty\libconfig\parsectx.h	/^  config_t *config;$/;"	m	struct:parse_context
config	.\src\3rdparty\libconfig\scanctx.h	/^  config_t *config;$/;"	m	struct:scan_context
config_destroy	.\src\3rdparty\libconfig\libconfig.c	/^void config_destroy(config_t *config)$/;"	f
config_error_file	.\src\3rdparty\libconfig\libconfig.h	308;"	d
config_error_line	.\src\3rdparty\libconfig\libconfig.h	311;"	d
config_error_t	.\src\3rdparty\libconfig\libconfig.h	/^} config_error_t;$/;"	t	typeref:enum:__anon1
config_error_text	.\src\3rdparty\libconfig\libconfig.h	305;"	d
config_error_type	.\src\3rdparty\libconfig\libconfig.h	314;"	d
config_get_auto_convert	.\src\3rdparty\libconfig\libconfig.c	/^int config_get_auto_convert(const config_t *config)$/;"	f
config_get_default_format	.\src\3rdparty\libconfig\libconfig.h	287;"	d
config_get_include_dir	.\src\3rdparty\libconfig\libconfig.h	201;"	d
config_get_tab_width	.\src\3rdparty\libconfig\libconfig.h	294;"	d
config_init	.\src\3rdparty\libconfig\libconfig.c	/^void config_init(config_t *config)$/;"	f
config_list_t	.\src\3rdparty\libconfig\libconfig.h	/^typedef struct config_list_t$/;"	s
config_list_t	.\src\3rdparty\libconfig\libconfig.h	/^} config_list_t;$/;"	t	typeref:struct:config_list_t
config_lookup	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_lookup(const config_t *config, const char *path)$/;"	f
config_lookup_bool	.\src\3rdparty\libconfig\libconfig.c	/^int config_lookup_bool(const config_t *config, const char *path, int *value)$/;"	f
config_lookup_float	.\src\3rdparty\libconfig\libconfig.c	/^int config_lookup_float(const config_t *config, const char *path,$/;"	f
config_lookup_from	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_lookup_from(config_setting_t *setting,$/;"	f
config_lookup_int	.\src\3rdparty\libconfig\libconfig.c	/^int config_lookup_int(const config_t *config, const char *path,$/;"	f
config_lookup_int64	.\src\3rdparty\libconfig\libconfig.c	/^int config_lookup_int64(const config_t *config, const char *path,$/;"	f
config_lookup_string	.\src\3rdparty\libconfig\libconfig.c	/^int config_lookup_string(const config_t *config, const char *path,$/;"	f
config_read	.\src\3rdparty\libconfig\libconfig.c	/^int config_read(config_t *config, FILE *stream)$/;"	f
config_read_file	.\src\3rdparty\libconfig\libconfig.c	/^int config_read_file(config_t *config, const char *filename)$/;"	f
config_read_string	.\src\3rdparty\libconfig\libconfig.c	/^int config_read_string(config_t *config, const char *str)$/;"	f
config_root_setting	.\src\3rdparty\libconfig\libconfig.h	279;"	d
config_set_auto_convert	.\src\3rdparty\libconfig\libconfig.c	/^void config_set_auto_convert(config_t *config, int flag)$/;"	f
config_set_default_format	.\src\3rdparty\libconfig\libconfig.h	283;"	d
config_set_destructor	.\src\3rdparty\libconfig\libconfig.c	/^void config_set_destructor(config_t *config, void (*destructor)(void *))$/;"	f
config_set_include_dir	.\src\3rdparty\libconfig\libconfig.c	/^void config_set_include_dir(config_t *config, const char *include_dir)$/;"	f
config_set_tab_width	.\src\3rdparty\libconfig\libconfig.h	290;"	d
config_setting_add	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_add(config_setting_t *parent,$/;"	f
config_setting_create	.\src\3rdparty\libconfig\libconfig.c	/^static config_setting_t *config_setting_create(config_setting_t *parent,$/;"	f	file:
config_setting_get_bool	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_get_bool(const config_setting_t *setting)$/;"	f
config_setting_get_bool_elem	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_get_bool_elem(const config_setting_t *vector, int idx)$/;"	f
config_setting_get_elem	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_get_elem(const config_setting_t *vector,$/;"	f
config_setting_get_float	.\src\3rdparty\libconfig\libconfig.c	/^double config_setting_get_float(const config_setting_t *setting)$/;"	f
config_setting_get_float_elem	.\src\3rdparty\libconfig\libconfig.c	/^double config_setting_get_float_elem(const config_setting_t *vector, int idx)$/;"	f
config_setting_get_format	.\src\3rdparty\libconfig\libconfig.c	/^short config_setting_get_format(const config_setting_t *setting)$/;"	f
config_setting_get_hook	.\src\3rdparty\libconfig\libconfig.h	259;"	d
config_setting_get_int	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_get_int(const config_setting_t *setting)$/;"	f
config_setting_get_int64	.\src\3rdparty\libconfig\libconfig.c	/^long long config_setting_get_int64(const config_setting_t *setting)$/;"	f
config_setting_get_int64_elem	.\src\3rdparty\libconfig\libconfig.c	/^long long config_setting_get_int64_elem(const config_setting_t *vector,$/;"	f
config_setting_get_int_elem	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_get_int_elem(const config_setting_t *vector, int idx)$/;"	f
config_setting_get_member	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_get_member(const config_setting_t *setting,$/;"	f
config_setting_get_string	.\src\3rdparty\libconfig\libconfig.c	/^const char *config_setting_get_string(const config_setting_t *setting)$/;"	f
config_setting_get_string_elem	.\src\3rdparty\libconfig\libconfig.c	/^const char *config_setting_get_string_elem(const config_setting_t *vector,$/;"	f
config_setting_index	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_index(const config_setting_t *setting)$/;"	f
config_setting_is_aggregate	.\src\3rdparty\libconfig\libconfig.h	214;"	d
config_setting_is_array	.\src\3rdparty\libconfig\libconfig.h	209;"	d
config_setting_is_group	.\src\3rdparty\libconfig\libconfig.h	207;"	d
config_setting_is_list	.\src\3rdparty\libconfig\libconfig.h	211;"	d
config_setting_is_number	.\src\3rdparty\libconfig\libconfig.h	219;"	d
config_setting_is_root	.\src\3rdparty\libconfig\libconfig.h	236;"	d
config_setting_is_scalar	.\src\3rdparty\libconfig\libconfig.h	224;"	d
config_setting_length	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_length(const config_setting_t *setting)$/;"	f
config_setting_lookup_bool	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_lookup_bool(const config_setting_t *setting,$/;"	f
config_setting_lookup_float	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_lookup_float(const config_setting_t *setting,$/;"	f
config_setting_lookup_int	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_lookup_int(const config_setting_t *setting,$/;"	f
config_setting_lookup_int64	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_lookup_int64(const config_setting_t *setting,$/;"	f
config_setting_lookup_string	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_lookup_string(const config_setting_t *setting,$/;"	f
config_setting_name	.\src\3rdparty\libconfig\libconfig.h	228;"	d
config_setting_parent	.\src\3rdparty\libconfig\libconfig.h	232;"	d
config_setting_remove	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_remove(config_setting_t *parent, const char *name)$/;"	f
config_setting_remove_elem	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_remove_elem(config_setting_t *parent, unsigned int idx)$/;"	f
config_setting_set_bool	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_set_bool(config_setting_t *setting, int value)$/;"	f
config_setting_set_bool_elem	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_set_bool_elem(config_setting_t *vector,$/;"	f
config_setting_set_float	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_set_float(config_setting_t *setting, double value)$/;"	f
config_setting_set_float_elem	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_set_float_elem(config_setting_t *vector,$/;"	f
config_setting_set_format	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_set_format(config_setting_t *setting, short format)$/;"	f
config_setting_set_hook	.\src\3rdparty\libconfig\libconfig.c	/^void config_setting_set_hook(config_setting_t *setting, void *hook)$/;"	f
config_setting_set_int	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_set_int(config_setting_t *setting, int value)$/;"	f
config_setting_set_int64	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_set_int64(config_setting_t *setting, long long value)$/;"	f
config_setting_set_int64_elem	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_set_int64_elem(config_setting_t *vector,$/;"	f
config_setting_set_int_elem	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_set_int_elem(config_setting_t *vector,$/;"	f
config_setting_set_string	.\src\3rdparty\libconfig\libconfig.c	/^int config_setting_set_string(config_setting_t *setting, const char *value)$/;"	f
config_setting_set_string_elem	.\src\3rdparty\libconfig\libconfig.c	/^config_setting_t *config_setting_set_string_elem(config_setting_t *vector,$/;"	f
config_setting_source_file	.\src\3rdparty\libconfig\libconfig.h	301;"	d
config_setting_source_line	.\src\3rdparty\libconfig\libconfig.h	297;"	d
config_setting_t	.\src\3rdparty\libconfig\libconfig.h	/^typedef struct config_setting_t$/;"	s
config_setting_t	.\src\3rdparty\libconfig\libconfig.h	/^} config_setting_t;$/;"	t	typeref:struct:config_setting_t
config_setting_type	.\src\3rdparty\libconfig\libconfig.h	204;"	d
config_t	.\src\3rdparty\libconfig\libconfig.h	/^typedef struct config_t$/;"	s
config_t	.\src\3rdparty\libconfig\libconfig.h	/^} config_t;$/;"	t	typeref:struct:config_t
config_value_t	.\src\3rdparty\libconfig\libconfig.h	/^typedef union config_value_t$/;"	u
config_value_t	.\src\3rdparty\libconfig\libconfig.h	/^} config_value_t;$/;"	t	typeref:union:config_value_t
config_write	.\src\3rdparty\libconfig\libconfig.c	/^void config_write(const config_t *config, FILE *stream)$/;"	f
config_write_file	.\src\3rdparty\libconfig\libconfig.c	/^int config_write_file(config_t *config, const char *filename)$/;"	f
configure	.\src\opentld\main\Config.cpp	/^int Config::configure(Main *main)$/;"	f	class:tld::Config
containsValidData	.\src\libopentld\tld\DetectionResult.h	/^    bool containsValidData;$/;"	m	class:tld::DetectionResult
contourTracing	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^void contourTracing( IplImage *image, $/;"	f
copy2D	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVStatus copy2D(NCVMatrix<T> &dst, NcvSize32u roi, cudaStream_t cuStream) const$/;"	f	class:NCVMatrix
copySolid	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVStatus copySolid(NCVMatrix<T> &dst, cudaStream_t cuStream, size_t howMuch=0) const$/;"	f	class:NCVMatrix
copySolid	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVStatus copySolid(NCVVector<T> &dst, cudaStream_t cuStream, size_t howMuch=0) const$/;"	f	class:NCVVector
cuda	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^namespace cuda$/;"	n	namespace:tld	file:
cuda	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	/^namespace cuda$/;"	n	namespace:tld
cuda	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^namespace cuda$/;"	n	namespace:tld	file:
cuda	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^namespace cuda$/;"	n	namespace:tld
cuda	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^namespace cuda$/;"	n	namespace:tld	file:
cuda	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	/^namespace cuda$/;"	n	namespace:tld
cudaCheckErrors	.\src\libopentld\tld\detector\cuda\CUDA.h	15;"	d
cudaCheckErrors	.\src\libopentld\tld\detector\cuda\CUDA.h	17;"	d
cudaCheckErrors	.\src\libopentld\tld\detector\cuda\CUDA.h	28;"	d
currBB	.\src\libopentld\tld\TLD.h	/^    cv::Rect *currBB;$/;"	m	class:tld::TLD
currConf	.\src\libopentld\tld\TLD.h	/^    float currConf;$/;"	m	class:tld::TLD
currImg	.\src\libopentld\tld\TLD.h	/^    cv::Mat currImg;$/;"	m	class:tld::TLD
currentFrame	.\src\libopentld\imacq\ImAcq.h	/^    int currentFrame;$/;"	m	struct:__anon3
currentSize	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t currentSize;$/;"	m	class:NCVMemNativeAllocator
currentSize	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t currentSize;$/;"	m	class:NCVMemStackAllocator
cutoff	.\src\libopentld\tld\Clustering.h	/^    float cutoff;$/;"	m	class:tld::Clustering
d_inWinIndices	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	/^    int * d_inWinIndices;$/;"	m	class:tld::cuda::CuDetectorCascade
data	.\src\libopentld\tld\detector\IntegralImage.h	/^    T *data;  \/* Array containg the entries for the integral image in row-first manner. Of size width*height. Allocated by tldAllocIntImg *\/$/;"	m	class:tld::IntegralImage
default_format	.\src\3rdparty\libconfig\libconfig.h	/^  short default_format;$/;"	m	struct:config_t
depth	.\src\3rdparty\libconfig\scanctx.h	/^  int depth;$/;"	m	struct:scan_context
destructor	.\src\3rdparty\libconfig\libconfig.h	/^  void (*destructor)(void *);$/;"	m	struct:config_t
detect	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::detect(const Mat &img)$/;"	f	class:tld::DetectorCascade
detect	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::detect(const Mat &img)$/;"	f	class:tld::cuda::CuDetectorCascade
detectionResult	.\src\libopentld\tld\Clustering.h	/^    DetectionResult *detectionResult;$/;"	m	class:tld::Clustering
detectionResult	.\src\libopentld\tld\IDetectorCascade.h	/^    DetectionResult *detectionResult;$/;"	m	class:tld::IDetectorCascade
detectionResult	.\src\libopentld\tld\IEnsembleClassifier.h	/^    DetectionResult *detectionResult;$/;"	m	class:tld::IEnsembleClassifier
detectionResult	.\src\libopentld\tld\INNClassifier.h	/^    DetectionResult *detectionResult;$/;"	m	class:tld::INNClassifier
detectionResult	.\src\libopentld\tld\IVarianceFilter.h	/^    DetectionResult *detectionResult;$/;"	m	class:tld::IVarianceFilter
detectionResult	.\src\libopentld\tld\detector\ForegroundDetector.h	/^    DetectionResult *detectionResult;$/;"	m	class:tld::ForegroundDetector
detectorBB	.\src\libopentld\tld\DetectionResult.h	/^    cv::Rect *detectorBB; \/\/Contains a valid result only if numClusters = 1$/;"	m	class:tld::DetectionResult
detectorCascade	.\src\libopentld\tld\TLD.h	/^    IDetectorCascade *detectorCascade;$/;"	m	class:tld::TLD
detectorEnabled	.\src\libopentld\tld\TLD.h	/^    bool detectorEnabled;$/;"	m	class:tld::TLD
doWork	.\src\opentld\main\Main.cpp	/^void Main::doWork()$/;"	f	class:Main
double_stl_vector	.\src\3rdparty\cvblobs\BlobResult.h	/^	typedef std::vector<double> double_stl_vector;$/;"	t
drag	.\src\opentld\main\Gui.cpp	/^static int drag = 0;$/;"	m	namespace:tld	file:
drawTrajectory	.\src\opentld\main\Trajectory.cpp	/^void Trajectory::drawTrajectory(IplImage * image)$/;"	f	class:tld::Trajectory
elements	.\src\3rdparty\libconfig\libconfig.h	/^  config_setting_t **elements;$/;"	m	struct:config_list_t
enabled	.\src\libopentld\tld\IEnsembleClassifier.h	/^    bool enabled;$/;"	m	class:tld::IEnsembleClassifier
enabled	.\src\libopentld\tld\INNClassifier.h	/^    bool enabled;$/;"	m	class:tld::INNClassifier
enabled	.\src\libopentld\tld\IVarianceFilter.h	/^    bool enabled;$/;"	m	class:tld::IVarianceFilter
end	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u *end;$/;"	m	class:NCVMemStackAllocator
ensembleClassifier	.\src\libopentld\tld\IDetectorCascade.h	/^    IEnsembleClassifier *ensembleClassifier;$/;"	m	class:tld::IDetectorCascade
err_array_elem_type	.\src\3rdparty\libconfig\grammar.c	/^static const char *err_array_elem_type = "mismatched element type in array";$/;"	v	file:
err_bad_include	.\src\3rdparty\libconfig\scanctx.c	/^static const char *err_bad_include = "cannot open include file";$/;"	v	file:
err_duplicate_setting	.\src\3rdparty\libconfig\grammar.c	/^static const char *err_duplicate_setting = "duplicate setting name";$/;"	v	file:
err_include_too_deep	.\src\3rdparty\libconfig\scanctx.c	/^static const char *err_include_too_deep = "include file nesting too deep";$/;"	v	file:
error_file	.\src\3rdparty\libconfig\libconfig.h	/^  const char *error_file;$/;"	m	struct:config_t
error_line	.\src\3rdparty\libconfig\libconfig.h	/^  int error_line;$/;"	m	struct:config_t
error_text	.\src\3rdparty\libconfig\libconfig.h	/^  const char *error_text;$/;"	m	struct:config_t
error_type	.\src\3rdparty\libconfig\libconfig.h	/^  config_error_t error_type;$/;"	m	struct:config_t
euclideanDistance	.\src\libopentld\mftracker\Lk.cpp	/^void euclideanDistance(CvPoint2D32f *point1, CvPoint2D32f *point2,$/;"	f
exists	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool exists(const std::string & path) const throw()$/;"	f	class:libconfig::Config
exists	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool exists(const std::string &name) const throw()$/;"	f	class:libconfig::Setting
exists	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::exists(const char *path) const throw()$/;"	f	class:libconfig::Config
exists	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::exists(const char *name) const throw()$/;"	f	class:libconfig::Setting
exportModelAfterRun	.\src\opentld\main\Main.h	/^    bool exportModelAfterRun;$/;"	m	class:Main
falsePositives	.\src\libopentld\tld\INNClassifier.h	/^    std::vector<NormalizedPatch>* falsePositives;$/;"	m	class:tld::INNClassifier
fbtrack	.\src\libopentld\mftracker\FBTrack.cpp	/^int fbtrack(IplImage *imgI, IplImage *imgJ, float *bb, float *bbnew,$/;"	f
featureOffsets	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int *featureOffsets;$/;"	m	class:tld::IEnsembleClassifier
featureVectors	.\src\libopentld\tld\DetectionResult.h	/^    int *featureVectors;$/;"	m	class:tld::DetectionResult
features	.\CMakeFiles\feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	.\CMakeFiles\feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
features	.\src\libopentld\tld\IEnsembleClassifier.h	/^    float *features;$/;"	m	class:tld::IEnsembleClassifier
features_d	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^    float *features_d;$/;"	m	class:tld::cuda::CuEnsembleClassifier
fgList	.\src\libopentld\tld\DetectionResult.h	/^    std::vector<cv::Rect>* fgList;$/;"	m	class:tld::DetectionResult
fgThreshold	.\src\libopentld\tld\detector\ForegroundDetector.h	/^    int fgThreshold;$/;"	m	class:tld::ForegroundDetector
file	.\src\3rdparty\libconfig\libconfig.h	/^  const char *file;$/;"	m	struct:config_setting_t
filenames	.\src\3rdparty\libconfig\libconfig.h	/^  const char **filenames;$/;"	m	struct:config_t
filenames	.\src\3rdparty\libconfig\scanctx.h	/^  const char **filenames;$/;"	m	struct:scan_context
files	.\src\3rdparty\libconfig\scanctx.h	/^  const char *files[MAX_INCLUDE_DEPTH];$/;"	m	struct:scan_context
filter	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^bool EnsembleClassifier::filter(int i)$/;"	f	class:tld::EnsembleClassifier
filter	.\src\libopentld\tld\detector\NNClassifier.cpp	/^bool NNClassifier::filter(const Mat &img, int windowIdx)$/;"	f	class:tld::NNClassifier
filter	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^bool VarianceFilter::filter(int i)$/;"	f	class:tld::VarianceFilter
filter	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::filter(const GpuMat &img, int *d_inWinIndices, int &numInWins)$/;"	f	class:tld::cuda::CuEnsembleClassifier
filter	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^void CuVarianceFilter::filter(const GpuMat &img, int *d_inWinIndices, int &numInWins)$/;"	f	class:tld::cuda::CuVarianceFilter
flags	.\src\3rdparty\libconfig\libconfig.h	/^  unsigned short flags;$/;"	m	struct:config_t
flex_int16_t	.\src\3rdparty\libconfig\scanner.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	.\src\3rdparty\libconfig\scanner.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int16_t	.\src\3rdparty\libconfig\scanner.h	/^typedef int16_t flex_int16_t;$/;"	t
flex_int16_t	.\src\3rdparty\libconfig\scanner.h	/^typedef short int flex_int16_t;$/;"	t
flex_int32_t	.\src\3rdparty\libconfig\scanner.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	.\src\3rdparty\libconfig\scanner.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int32_t	.\src\3rdparty\libconfig\scanner.h	/^typedef int flex_int32_t;$/;"	t
flex_int32_t	.\src\3rdparty\libconfig\scanner.h	/^typedef int32_t flex_int32_t;$/;"	t
flex_int8_t	.\src\3rdparty\libconfig\scanner.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	.\src\3rdparty\libconfig\scanner.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_int8_t	.\src\3rdparty\libconfig\scanner.h	/^typedef int8_t flex_int8_t;$/;"	t
flex_int8_t	.\src\3rdparty\libconfig\scanner.h	/^typedef signed char flex_int8_t;$/;"	t
flex_uint16_t	.\src\3rdparty\libconfig\scanner.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	.\src\3rdparty\libconfig\scanner.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint16_t	.\src\3rdparty\libconfig\scanner.h	/^typedef uint16_t flex_uint16_t;$/;"	t
flex_uint16_t	.\src\3rdparty\libconfig\scanner.h	/^typedef unsigned short int flex_uint16_t;$/;"	t
flex_uint32_t	.\src\3rdparty\libconfig\scanner.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	.\src\3rdparty\libconfig\scanner.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint32_t	.\src\3rdparty\libconfig\scanner.h	/^typedef uint32_t flex_uint32_t;$/;"	t
flex_uint32_t	.\src\3rdparty\libconfig\scanner.h	/^typedef unsigned int flex_uint32_t;$/;"	t
flex_uint8_t	.\src\3rdparty\libconfig\scanner.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	.\src\3rdparty\libconfig\scanner.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flex_uint8_t	.\src\3rdparty\libconfig\scanner.h	/^typedef uint8_t flex_uint8_t;$/;"	t
flex_uint8_t	.\src\3rdparty\libconfig\scanner.h	/^typedef unsigned char flex_uint8_t; $/;"	t
font	.\src\opentld\main\Gui.cpp	/^static CvFont font;$/;"	m	namespace:tld	file:
format	.\src\3rdparty\libconfig\libconfig.h	/^  short format;$/;"	m	struct:config_setting_t
fps	.\src\libopentld\imacq\ImAcq.h	/^    float fps;$/;"	m	struct:__anon3
freemanCodeIncrement	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^static const CvPoint freemanCodeIncrement[8] =$/;"	v	file:
fromhex	.\src\3rdparty\libconfig\scanner.c	/^static unsigned long long fromhex(const char *s)$/;"	f	file:
funcio_calculBlob	.\src\3rdparty\cvblobs\BlobOperators.h	/^typedef COperadorBlob funcio_calculBlob;$/;"	t
functorComparacioIdOperador	.\src\3rdparty\cvblobs\BlobOperators.h	/^	struct functorComparacioIdOperador$/;"	s
fuseHypotheses	.\src\libopentld\tld\TLD.cpp	/^void TLD::fuseHypotheses()$/;"	f	class:tld::TLD
fval	.\src\3rdparty\libconfig\grammar.c	/^  double fval;$/;"	m	union:YYSTYPE	file:
fval	.\src\3rdparty\libconfig\grammar.h	/^  double fval;$/;"	m	union:YYSTYPE
fval	.\src\3rdparty\libconfig\libconfig.h	/^  double fval;$/;"	m	union:config_value_t
getAllocatorsAlignment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u getAllocatorsAlignment() const$/;"	f	class:NCVMatrixAlloc
getAllocatorsAlignment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u getAllocatorsAlignment() const$/;"	f	class:NCVVectorAlloc
getAutoConvert	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::getAutoConvert() const$/;"	f	class:libconfig::Config
getBBFromUser	.\src\opentld\main\Gui.cpp	/^int getBBFromUser(IplImage *img, CvRect &rect, Gui *gui)$/;"	f	namespace:tld
getBbHeight	.\src\libopentld\mftracker\BBPredict.cpp	/^float getBbHeight(float *bb)$/;"	f
getBbWidth	.\src\libopentld\mftracker\BBPredict.cpp	/^float getBbWidth(float *bb)$/;"	f
getCPUFreq	.\src\libopentld\tld\Timing.h	/^static __inline__ tick_t getCPUFreq() {$/;"	f
getCPUTick	.\src\libopentld\tld\Timing.h	/^static __inline__ void getCPUTick(tick_t *c)$/;"	f
getDefaultFormat	.\src\3rdparty\libconfig\libconfig.h++	/^  inline Setting::Format getDefaultFormat() const$/;"	f	class:libconfig::Config
getError	.\src\3rdparty\libconfig\libconfig.h++	/^  inline const char *getError() const throw()$/;"	f	class:libconfig::ParseException
getFile	.\src\3rdparty\libconfig\libconfig.h++	/^  inline const char *getFile() const throw()$/;"	f	class:libconfig::ParseException
getFilledBBPoints	.\src\libopentld\mftracker\BB.cpp	/^int getFilledBBPoints(float *bb, int numM, int numN, int margin, float *pts)$/;"	f
getFormat	.\src\3rdparty\libconfig\libconfig.h++	/^  inline Format getFormat() const throw() { return(_format); }$/;"	f	class:libconfig::Setting
getIncludeDir	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *Config::getIncludeDir() const throw()$/;"	f	class:libconfig::Config
getIndex	.\src\3rdparty\libconfig\libconfigcpp.c++	/^int Setting::getIndex() const throw()$/;"	f	class:libconfig::Setting
getKey	.\src\opentld\main\Gui.cpp	/^char Gui::getKey()$/;"	f	class:tld::Gui
getLength	.\src\3rdparty\libconfig\libconfigcpp.c++	/^int Setting::getLength() const throw()$/;"	f	class:libconfig::Setting
getLine	.\src\3rdparty\libconfig\libconfig.h++	/^  inline int getLine() const throw()$/;"	f	class:libconfig::ParseException
getMedian	.\src\libopentld\mftracker\Median.cpp	/^float getMedian(float arr[], int n)$/;"	f
getMedianUnmanaged	.\src\libopentld\mftracker\Median.cpp	/^float getMedianUnmanaged(float arr[], int n)$/;"	f
getName	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char * Setting::getName() const throw()$/;"	f	class:libconfig::Setting
getParent	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::getParent() throw(SettingNotFoundException)$/;"	f	class:libconfig::Setting
getParent	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const Setting & Setting::getParent() const throw(SettingNotFoundException)$/;"	f	class:libconfig::Setting
getPath	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *SettingException::getPath() const$/;"	f	class:libconfig::SettingException
getPath	.\src\3rdparty\libconfig\libconfigcpp.c++	/^std::string Setting::getPath() const$/;"	f	class:libconfig::Setting
getRoot	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Config::getRoot() const$/;"	f	class:libconfig::Config
getSegment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemSegment getSegment() const$/;"	f	class:NCVMatrixAlloc
getSegment	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemSegment getSegment() const$/;"	f	class:NCVVectorAlloc
getSettingsFromConfigDialog	.\src\opentld\qopentld\ConfigDialog.cpp	/^bool getSettingsFromConfigDialog(int argc, char *argv[],$/;"	f
getSourceFile	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *Setting::getSourceFile() const throw()$/;"	f	class:libconfig::Setting
getSourceLine	.\src\3rdparty\libconfig\libconfigcpp.c++	/^unsigned int Setting::getSourceLine() const throw()$/;"	f	class:libconfig::Setting
getTabWidth	.\src\3rdparty\libconfig\libconfigcpp.c++	/^unsigned short Config::getTabWidth() const throw()$/;"	f	class:libconfig::Config
getType	.\src\3rdparty\libconfig\libconfig.h++	/^  inline Type getType() const throw() { return(_type); }$/;"	f	class:libconfig::Setting
getopt	.\src\opentld\main\Config.cpp	/^int getopt(int argc, char **argv, char *opts)$/;"	f	namespace:tld
gui	.\src\opentld\main\Main.h	/^    tld::Gui *gui;$/;"	m	class:Main
handleError	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::handleError() const$/;"	f	class:libconfig::Config
height	.\src\libopentld\tld\detector\IntegralImage.h	/^    int height;$/;"	m	class:tld::IntegralImage
height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s height;     \/\/\/< Rectangle height.$/;"	m	struct:NcvRect32s
height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s height; \/\/\/< Rectangle height.$/;"	m	struct:NcvSize32s
height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u height() const {return this->_height;}$/;"	f	class:NCVMatrix
height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u height;     \/\/\/< Rectangle height.$/;"	m	struct:NcvRect32u
height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u height; \/\/\/< Rectangle height.$/;"	m	struct:NcvSize32u
height	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u height;$/;"	m	struct:NcvRect8u
help_text	.\src\opentld\main\Config.cpp	/^static char help_text[] =$/;"	m	namespace:tld	file:
hook	.\src\3rdparty\libconfig\libconfig.h	/^  void *hook;$/;"	m	struct:config_setting_t
imAcq	.\src\opentld\main\Main.h	/^    ImAcq *imAcq;$/;"	m	class:Main
imAcqAdvance	.\src\libopentld\imacq\ImAcq.cpp	/^void imAcqAdvance(ImAcq *imAcq) {$/;"	f
imAcqAlloc	.\src\libopentld\imacq\ImAcq.cpp	/^ImAcq *imAcqAlloc() {$/;"	f
imAcqFree	.\src\libopentld\imacq\ImAcq.cpp	/^void imAcqFree(ImAcq *imAcq) {$/;"	f
imAcqGetImg	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqGetImg(ImAcq *imAcq) {$/;"	f
imAcqGetImgAndAdvance	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqGetImgAndAdvance(ImAcq *imAcq) {$/;"	f
imAcqGetImgByCurrentTime	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqGetImgByCurrentTime(ImAcq *imAcq) {$/;"	f
imAcqGetImgByFrame	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqGetImgByFrame(ImAcq *imAcq, int fNo) {$/;"	f
imAcqGrab	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqGrab(CvCapture *capture) {$/;"	f
imAcqHasMoreFrames	.\src\libopentld\imacq\ImAcq.cpp	/^int imAcqHasMoreFrames(ImAcq *imAcq) {$/;"	f
imAcqInit	.\src\libopentld\imacq\ImAcq.cpp	/^void imAcqInit(ImAcq *imAcq) {$/;"	f
imAcqLoadCurrentFrame	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqLoadCurrentFrame(ImAcq *imAcq) {$/;"	f
imAcqLoadFrame	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqLoadFrame(ImAcq *imAcq, int fNo) {$/;"	f
imAcqLoadImg	.\src\libopentld\imacq\ImAcq.cpp	/^IplImage *imAcqLoadImg(ImAcq *imAcq, char *path) {$/;"	f
imAcqVidGetNextFrameNumber	.\src\libopentld\imacq\ImAcq.cpp	/^int imAcqVidGetNextFrameNumber(ImAcq *imAcq) {$/;"	f
imAcqVidGetNumberOfFrames	.\src\libopentld\imacq\ImAcq.cpp	/^int imAcqVidGetNumberOfFrames(ImAcq *imAcq) {$/;"	f
imAcqVidSetNextFrameNumber	.\src\libopentld\imacq\ImAcq.cpp	/^void imAcqVidSetNextFrameNumber(ImAcq *imAcq, int nFrame) {$/;"	f
img	.\src\libopentld\tld\detector\EnsembleClassifier.h	/^    const unsigned char *img;$/;"	m	class:tld::EnsembleClassifier
img0	.\src\opentld\main\Gui.cpp	/^static IplImage *img0;$/;"	m	namespace:tld	file:
img1	.\src\opentld\main\Gui.cpp	/^static IplImage *img1;$/;"	m	namespace:tld	file:
imgHeight	.\src\libopentld\tld\IDetectorCascade.h	/^    int imgHeight;$/;"	m	class:tld::IDetectorCascade
imgPath	.\src\libopentld\imacq\ImAcq.h	/^    const char *imgPath;$/;"	m	struct:__anon3
imgWidth	.\src\libopentld\tld\IDetectorCascade.h	/^    int imgWidth;$/;"	m	class:tld::IDetectorCascade
imgWidthStep	.\src\libopentld\tld\IDetectorCascade.h	/^    int imgWidthStep;$/;"	m	class:tld::IDetectorCascade
imgWidthStep	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int imgWidthStep;$/;"	m	class:tld::IEnsembleClassifier
include_dir	.\src\3rdparty\libconfig\libconfig.h	/^  const char *include_dir;$/;"	m	struct:config_t
index	.\src\libopentld\tld\TLD.cpp	/^    int index;$/;"	m	struct:tld::__anon5	file:
info_arch	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_language_dialect_default	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_version	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
init	.\src\libopentld\tld\DetectionResult.cpp	/^void DetectionResult::init(int numWindows, int numTrees)$/;"	f	class:tld::DetectionResult
init	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::init()$/;"	f	class:tld::DetectorCascade
init	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::init()$/;"	f	class:tld::EnsembleClassifier
init	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::init()$/;"	f	class:tld::cuda::CuDetectorCascade
init	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::init()$/;"	f	class:tld::cuda::CuEnsembleClassifier
init	.\src\opentld\main\Config.cpp	/^int Config::init(int argc, char **argv)$/;"	f	class:tld::Config
init	.\src\opentld\main\Gui.cpp	/^void Gui::init()$/;"	f	class:tld::Gui
init	.\src\opentld\main\Trajectory.cpp	/^void Trajectory::init(std::size_t length)$/;"	f	class:tld::Trajectory
initFeatureLocations	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::initFeatureLocations()$/;"	f	class:tld::EnsembleClassifier
initFeatureLocations	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::initFeatureLocations()$/;"	f	class:tld::cuda::CuEnsembleClassifier
initFeatureOffsets	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::initFeatureOffsets()$/;"	f	class:tld::EnsembleClassifier
initFeatureOffsets	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::initFeatureOffsets()$/;"	f	class:tld::cuda::CuEnsembleClassifier
initGPU	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::initGPU()$/;"	f	class:tld::cuda::CuEnsembleClassifier
initImgs	.\src\libopentld\mftracker\Lk.cpp	/^void initImgs()$/;"	f
initPosteriors	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::initPosteriors()$/;"	f	class:tld::EnsembleClassifier
initPosteriors	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::initPosteriors()$/;"	f	class:tld::cuda::CuEnsembleClassifier
initWindowOffsets	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::initWindowOffsets()$/;"	f	class:tld::DetectorCascade
initWindowOffsets	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::initWindowOffsets()$/;"	f	class:tld::cuda::CuDetectorCascade
initWindowsAndScales	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::initWindowsAndScales()$/;"	f	class:tld::DetectorCascade
initWindowsAndScales	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::initWindowsAndScales()$/;"	f	class:tld::cuda::CuDetectorCascade
initialBB	.\src\opentld\main\Main.h	/^    int *initialBB;$/;"	m	class:Main
initialLearning	.\src\libopentld\tld\TLD.cpp	/^void TLD::initialLearning()$/;"	f	class:tld::TLD
initialised	.\src\libopentld\tld\IDetectorCascade.h	/^    bool initialised;$/;"	m	class:tld::IDetectorCascade
integral	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^void CuVarianceFilter::integral(const GpuMat &src, GpuMat &sum)$/;"	f	class:tld::cuda::CuVarianceFilter
integralBuffered	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^void CuVarianceFilter::integralBuffered(const GpuMat &src, GpuMat &buffer, GpuMat &sum)$/;"	f	class:tld::cuda::CuVarianceFilter
integralImg	.\src\libopentld\tld\detector\VarianceFilter.h	/^    IntegralImage<int>* integralImg;$/;"	m	class:tld::VarianceFilter
integralImg	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	/^    GpuMat integralImg;$/;"	m	class:tld::cuda::CuVarianceFilter
integralImg_squared	.\src\libopentld\tld\detector\VarianceFilter.h	/^    IntegralImage<long long>* integralImg_squared;$/;"	m	class:tld::VarianceFilter
isActive	.\src\libopentld\tld\detector\ForegroundDetector.cpp	/^bool ForegroundDetector::isActive()$/;"	f	class:tld::ForegroundDetector
isAggregate	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool isAggregate() const throw()$/;"	f	class:libconfig::Setting
isArray	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool isArray() const throw()$/;"	f	class:libconfig::Setting
isGroup	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool isGroup() const throw()$/;"	f	class:libconfig::Setting
isList	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool isList() const throw()$/;"	f	class:libconfig::Setting
isMemAllocated	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool isMemAllocated() const$/;"	f	class:NCVMatrixAlloc
isMemAllocated	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool isMemAllocated() const$/;"	f	class:NCVVectorAlloc
isMemReused	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool isMemReused() const$/;"	f	class:NCVMatrixReuse
isMemReused	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvBool isMemReused() const$/;"	f	class:NCVVectorReuse
isNumber	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool isNumber() const throw()$/;"	f	class:libconfig::Setting
isRoot	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::isRoot() const throw()$/;"	f	class:libconfig::Setting
isScalar	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool isScalar() const throw()$/;"	f	class:libconfig::Setting
is_negative	.\src\libopentld\tld\detector\cuda\CUDA.h	/^struct is_negative$/;"	s
ival	.\src\3rdparty\libconfig\grammar.c	/^  int ival;$/;"	m	union:YYSTYPE	file:
ival	.\src\3rdparty\libconfig\grammar.h	/^  int ival;$/;"	m	union:YYSTYPE
ival	.\src\3rdparty\libconfig\libconfig.h	/^  int ival;$/;"	m	union:config_value_t
lastFrame	.\src\libopentld\imacq\ImAcq.h	/^    int lastFrame;$/;"	m	struct:__anon3
learn	.\src\libopentld\tld\TLD.cpp	/^void TLD::learn()$/;"	f	class:tld::TLD
learn	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::learn(int *boundary, int positive, int *featureVector)$/;"	f	class:tld::EnsembleClassifier
learn	.\src\libopentld\tld\detector\NNClassifier.cpp	/^void NNClassifier::learn(vector<NormalizedPatch> patches)$/;"	f	class:tld::NNClassifier
learn	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::learn(int *boundary, int positive, int *featureVector)$/;"	f	class:tld::cuda::CuEnsembleClassifier
learning	.\src\libopentld\tld\TLD.h	/^    bool learning;$/;"	m	class:tld::TLD
learningEnabled	.\src\libopentld\tld\TLD.h	/^    bool learningEnabled;$/;"	m	class:tld::TLD
length	.\src\3rdparty\libconfig\libconfig.h	/^  unsigned int length;$/;"	m	struct:config_list_t
length	.\src\3rdparty\libconfig\strbuf.h	/^  size_t length;$/;"	m	struct:__anon2
length	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t length() const {return this->_length;}$/;"	f	class:NCVVector
libconfig	.\src\3rdparty\libconfig\libconfig.h++	/^namespace libconfig {$/;"	n
libconfig	.\src\3rdparty\libconfig\libconfigcpp.c++	/^namespace libconfig {$/;"	n	file:
libconfig_yyHEADER_H	.\src\3rdparty\libconfig\scanner.h	2;"	d
libconfig_yyIN_HEADER	.\src\3rdparty\libconfig\scanner.h	325;"	d
libconfig_yyIN_HEADER	.\src\3rdparty\libconfig\scanner.h	3;"	d
libconfig_yy_create_buffer	.\src\3rdparty\libconfig\scanner.c	/^    YY_BUFFER_STATE libconfig_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)$/;"	f
libconfig_yy_delete_buffer	.\src\3rdparty\libconfig\scanner.c	/^    void libconfig_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
libconfig_yy_flush_buffer	.\src\3rdparty\libconfig\scanner.c	/^    void libconfig_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
libconfig_yy_init_buffer	.\src\3rdparty\libconfig\scanner.c	/^    static void libconfig_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)$/;"	f	file:
libconfig_yy_load_buffer_state	.\src\3rdparty\libconfig\scanner.c	/^static void libconfig_yy_load_buffer_state  (yyscan_t yyscanner)$/;"	f	file:
libconfig_yy_scan_buffer	.\src\3rdparty\libconfig\scanner.c	/^YY_BUFFER_STATE libconfig_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)$/;"	f
libconfig_yy_scan_bytes	.\src\3rdparty\libconfig\scanner.c	/^YY_BUFFER_STATE libconfig_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)$/;"	f
libconfig_yy_scan_string	.\src\3rdparty\libconfig\scanner.c	/^YY_BUFFER_STATE libconfig_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)$/;"	f
libconfig_yy_switch_to_buffer	.\src\3rdparty\libconfig\scanner.c	/^    void libconfig_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)$/;"	f
libconfig_yyalloc	.\src\3rdparty\libconfig\scanner.c	/^void *libconfig_yyalloc (yy_size_t  size , yyscan_t yyscanner)$/;"	f
libconfig_yyensure_buffer_stack	.\src\3rdparty\libconfig\scanner.c	/^static void libconfig_yyensure_buffer_stack (yyscan_t yyscanner)$/;"	f	file:
libconfig_yyerror	.\src\3rdparty\libconfig\grammar.c	/^void libconfig_yyerror(void *scanner, struct parse_context *ctx,$/;"	f
libconfig_yyfree	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyfree (void * ptr , yyscan_t yyscanner)$/;"	f
libconfig_yyget_column	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yyget_column  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_debug	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yyget_debug  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_extra	.\src\3rdparty\libconfig\scanner.c	/^YY_EXTRA_TYPE libconfig_yyget_extra  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_in	.\src\3rdparty\libconfig\scanner.c	/^FILE *libconfig_yyget_in  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_leng	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yyget_leng  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_lineno	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yyget_lineno  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_lval	.\src\3rdparty\libconfig\scanner.c	/^YYSTYPE * libconfig_yyget_lval  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_out	.\src\3rdparty\libconfig\scanner.c	/^FILE *libconfig_yyget_out  (yyscan_t yyscanner)$/;"	f
libconfig_yyget_text	.\src\3rdparty\libconfig\scanner.c	/^char *libconfig_yyget_text  (yyscan_t yyscanner)$/;"	f
libconfig_yylex_destroy	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yylex_destroy  (yyscan_t yyscanner)$/;"	f
libconfig_yylex_init	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yylex_init(yyscan_t* ptr_yy_globals)$/;"	f
libconfig_yylex_init_extra	.\src\3rdparty\libconfig\scanner.c	/^int libconfig_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )$/;"	f
libconfig_yypop_buffer_state	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yypop_buffer_state (yyscan_t yyscanner)$/;"	f
libconfig_yypush_buffer_state	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)$/;"	f
libconfig_yyrealloc	.\src\3rdparty\libconfig\scanner.c	/^void *libconfig_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)$/;"	f
libconfig_yyrestart	.\src\3rdparty\libconfig\scanner.c	/^    void libconfig_yyrestart  (FILE * input_file , yyscan_t yyscanner)$/;"	f
libconfig_yyset_column	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_column (int  column_no , yyscan_t yyscanner)$/;"	f
libconfig_yyset_debug	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_debug (int  bdebug , yyscan_t yyscanner)$/;"	f
libconfig_yyset_extra	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)$/;"	f
libconfig_yyset_in	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_in (FILE *  in_str , yyscan_t yyscanner)$/;"	f
libconfig_yyset_lineno	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_lineno (int  line_number , yyscan_t yyscanner)$/;"	f
libconfig_yyset_lval	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)$/;"	f
libconfig_yyset_out	.\src\3rdparty\libconfig\scanner.c	/^void libconfig_yyset_out (FILE *  out_str , yyscan_t yyscanner)$/;"	f
libconfig_yywrap	.\src\3rdparty\libconfig\scanner.c	348;"	d	file:
libconfig_yywrap	.\src\3rdparty\libconfig\scanner.h	215;"	d
line	.\src\3rdparty\libconfig\libconfig.h	/^  unsigned int line;$/;"	m	struct:config_setting_t
list	.\src\3rdparty\libconfig\libconfig.h	/^  struct config_list_t *list;$/;"	m	union:config_value_t	typeref:struct:config_value_t::config_list_t
llval	.\src\3rdparty\libconfig\grammar.c	/^  long long llval;$/;"	m	union:YYSTYPE	file:
llval	.\src\3rdparty\libconfig\grammar.h	/^  long long llval;$/;"	m	union:YYSTYPE
llval	.\src\3rdparty\libconfig\libconfig.h	/^  long long llval;$/;"	m	union:config_value_t
loadModel	.\src\opentld\main\Main.h	/^    bool loadModel;$/;"	m	class:Main
lookup	.\src\3rdparty\libconfig\libconfig.h++	/^  inline Setting & lookup(const std::string &path) const$/;"	f	class:libconfig::Config
lookup	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Config::lookup(const char *path) const$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, bool &value)$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, const char *&value) const$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, double &value) const$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, float &value) const$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, int &value)$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, long long &value)$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, std::string &value) const$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name, unsigned int &value)$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &name,$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, bool &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, const char *&value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, double &value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, float &value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, int &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, long long &value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, std::string &value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path, unsigned int &value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfig.h++	/^  inline bool lookupValue(const std::string &path,$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, bool &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, const char *&value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, double &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, float &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, int &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, long long &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, std::string &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, unsigned int &value) const throw()$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Config::lookupValue(const char *path, unsigned long long &value)$/;"	f	class:libconfig::Config
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, bool &value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, const char *&value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, double &value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, float &value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, int &value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, long long &value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, std::string &value) const throw()$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, unsigned int &value)$/;"	f	class:libconfig::Setting
lookupValue	.\src\3rdparty\libconfig\libconfigcpp.c++	/^bool Setting::lookupValue(const char *name, unsigned long long &value)$/;"	f	class:libconfig::Setting
m_alternating	.\src\opentld\main\Settings.h	/^    bool m_alternating; \/\/!< if set to true, detector is disabled while tracker is running.$/;"	m	class:tld::Settings
m_area	.\src\3rdparty\cvblobs\BlobContour.h	/^	double m_area;$/;"	m	class:CBlobContour
m_area	.\src\3rdparty\cvblobs\BlobProperties.h	/^        double m_area;$/;"	m	class:CBlobProperties
m_area	.\src\3rdparty\cvblobs\blob.h	/^	double m_area;$/;"	m	class:CBlob
m_blobs	.\src\3rdparty\cvblobs\BlobResult.h	/^	Blob_vector		m_blobs;$/;"	m	class:CBlobResult
m_boundingBox	.\src\3rdparty\cvblobs\blob.h	/^	CvRect m_boundingBox;$/;"	m	class:CBlob
m_camNo	.\src\opentld\main\Settings.h	/^    int m_camNo; \/\/!< Which camera to use$/;"	m	class:tld::Settings
m_camNoSet	.\src\opentld\main\Config.h	/^    bool m_camNoSet;$/;"	m	class:tld::Config
m_cfg	.\src\opentld\main\Config.h	/^    libconfig::Config m_cfg; \/\/!< libconfig++$/;"	m	class:tld::Config
m_configPath	.\src\opentld\main\Config.h	/^    std::string m_configPath; \/\/!< path to the config file$/;"	m	class:tld::Config
m_contour	.\src\3rdparty\cvblobs\BlobContour.h	/^	t_chainCodeList m_contour; 	$/;"	m	class:CBlobContour
m_contourPoints	.\src\3rdparty\cvblobs\BlobContour.h	/^	t_PointList m_contourPoints;$/;"	m	class:CBlobContour
m_correctClosed	.\src\opentld\qopentld\ConfigDialog.h	/^    bool *m_correctClosed;$/;"	m	class:ConfigDialog
m_ellipse	.\src\3rdparty\cvblobs\blob.h	/^	CvBox2D m_ellipse;$/;"	m	class:CBlob
m_ensembleClassifierEnabled	.\src\opentld\main\Settings.h	/^    bool m_ensembleClassifierEnabled;$/;"	m	class:tld::Settings
m_exportModelAfterRun	.\src\opentld\main\Settings.h	/^    bool m_exportModelAfterRun; \/\/!< if set to true, model is exported after run.$/;"	m	class:tld::Settings
m_exportModelAfterRunSet	.\src\opentld\main\Config.h	/^    bool m_exportModelAfterRunSet;$/;"	m	class:tld::Config
m_externPerimeter	.\src\3rdparty\cvblobs\blob.h	/^	double m_externPerimeter;$/;"	m	class:CBlob
m_externalContour	.\src\3rdparty\cvblobs\BlobProperties.h	/^	CBlobContour m_externalContour;$/;"	m	class:CBlobProperties
m_externalContour	.\src\3rdparty\cvblobs\blob.h	/^	CBlobContour m_externalContour;$/;"	m	class:CBlob
m_fps	.\src\opentld\main\Settings.h	/^    float m_fps; \/\/!< Frames per second$/;"	m	class:tld::Settings
m_id	.\src\3rdparty\cvblobs\blob.h	/^	t_labelType m_id;$/;"	m	class:CBlob
m_image	.\src\3rdparty\cvblobs\BlobOperators.h	/^	IplImage *m_image;$/;"	m	class:CBlobGetMean
m_image	.\src\3rdparty\cvblobs\BlobOperators.h	/^	IplImage *m_image;$/;"	m	class:CBlobGetStdDev
m_imagePath	.\src\opentld\main\Settings.h	/^    std::string  m_imagePath; \/\/!< path to the images or the video if m_method is IMACQ_VID or IMACQ_IMGS$/;"	m	class:tld::Settings
m_imagePathSet	.\src\opentld\main\Config.h	/^    bool m_imagePathSet;$/;"	m	class:tld::Config
m_initialBBSet	.\src\opentld\main\Config.h	/^    bool m_initialBBSet;$/;"	m	class:tld::Config
m_initialBoundingBox	.\src\opentld\main\Settings.h	/^    std::vector<int> m_initialBoundingBox; \/\/!< Initial Bounding Box can be specified here$/;"	m	class:tld::Settings
m_internalContours	.\src\3rdparty\cvblobs\BlobProperties.h	/^	t_contourList m_internalContours;$/;"	m	class:CBlobProperties
m_internalContours	.\src\3rdparty\cvblobs\blob.h	/^	t_contourList m_internalContours;$/;"	m	class:CBlob
m_lastFrame	.\src\opentld\main\Settings.h	/^    int m_lastFrame; \/\/!< last frame of caputing; 0 means take all frames$/;"	m	class:tld::Settings
m_lastFrameSet	.\src\opentld\main\Config.h	/^    bool m_lastFrameSet;$/;"	m	class:tld::Config
m_learningEnabled	.\src\opentld\main\Settings.h	/^    bool m_learningEnabled; \/\/!< enables learning while processing$/;"	m	class:tld::Settings
m_length	.\src\opentld\main\Trajectory.h	/^	std::size_t m_length; \/\/\/< number of the last frames which are considered by the trajectory$/;"	m	class:tld::Trajectory
m_loadModel	.\src\opentld\main\Settings.h	/^    bool m_loadModel; \/\/!< if true, model specified by "modelPath" is loaded at startup$/;"	m	class:tld::Settings
m_mask	.\src\3rdparty\cvblobs\BlobOperators.h	/^	IplImage *m_mask;$/;"	m	class:CBlobGetExterior
m_mask	.\src\3rdparty\cvblobs\BlobOperators.h	/^	IplImage *m_mask;$/;"	m	class:CBlobGetExternHullPerimeterRatio
m_mask	.\src\3rdparty\cvblobs\BlobOperators.h	/^	IplImage *m_mask;$/;"	m	class:CBlobGetExternPerimeter
m_mask	.\src\3rdparty\cvblobs\BlobOperators.h	/^	IplImage *m_mask;$/;"	m	class:CBlobGetExternPerimeterRatio
m_maxScale	.\src\opentld\main\Settings.h	/^    int m_maxScale; \/\/!< number of scales larger than initial object size$/;"	m	class:tld::Settings
m_meanGray	.\src\3rdparty\cvblobs\blob.h	/^	double m_meanGray;$/;"	m	class:CBlob
m_method	.\src\opentld\main\Settings.h	/^    int m_method; \/\/!< method of capturing: IMACQ_CAM, IMACQ_IMGS or IMACQ_VID$/;"	m	class:tld::Settings
m_methodSet	.\src\opentld\main\Config.h	/^    bool m_methodSet;$/;"	m	class:tld::Config
m_minScale	.\src\opentld\main\Settings.h	/^    int m_minScale; \/\/!< number of scales smaller than initial object size$/;"	m	class:tld::Settings
m_minSize	.\src\opentld\main\Settings.h	/^    int m_minSize; \/\/!< minimum size of scanWindows$/;"	m	class:tld::Settings
m_modelExportFile	.\src\opentld\main\Settings.h	/^    std::string m_modelExportFile; \/\/!< Path where model is saved on export.$/;"	m	class:tld::Settings
m_modelPath	.\src\opentld\main\Settings.h	/^    std::string m_modelPath; \/\/!< if modelPath is not set then either an initialBoundingBox must be specified or selectManually must be true.$/;"	m	class:tld::Settings
m_modelPathSet	.\src\opentld\main\Config.h	/^    bool m_modelPathSet;$/;"	m	class:tld::Config
m_moment	.\src\3rdparty\cvblobs\BlobProperties.h	/^        double m_moment[MAX_MOMENTS_ORDER*MAX_MOMENTS_ORDER];$/;"	m	class:CBlobProperties
m_moments	.\src\3rdparty\cvblobs\BlobContour.h	/^	CvMoments m_moments;$/;"	m	class:CBlobContour
m_nnClassifierEnabled	.\src\opentld\main\Settings.h	/^    bool m_nnClassifierEnabled;$/;"	m	class:tld::Settings
m_numFeatures	.\src\opentld\main\Settings.h	/^    int m_numFeatures; \/\/!< number of features$/;"	m	class:tld::Settings
m_numTrees	.\src\opentld\main\Settings.h	/^    int m_numTrees; \/\/!< number of trees$/;"	m	class:tld::Settings
m_originalImageSize	.\src\3rdparty\cvblobs\blob.h	/^	CvSize m_originalImageSize;$/;"	m	class:CBlob
m_outputDir	.\src\opentld\main\Settings.h	/^    std::string m_outputDir; \/\/!< required if saveOutput = true, no default$/;"	m	class:tld::Settings
m_p	.\src\3rdparty\cvblobs\BlobOperators.h	/^	CvPoint2D32f m_p;$/;"	m	class:CBlobGetXYInside
m_p	.\src\3rdparty\cvblobs\BlobOperators.h	/^	int m_p, m_q;$/;"	m	class:CBlobGetMoment
m_parentStorage	.\src\3rdparty\cvblobs\BlobContour.h	/^	CvMemStorage *m_parentStorage;$/;"	m	class:CBlobContour
m_perimeter	.\src\3rdparty\cvblobs\BlobContour.h	/^	double m_perimeter;$/;"	m	class:CBlobContour
m_perimeter	.\src\3rdparty\cvblobs\BlobProperties.h	/^        double m_perimeter;$/;"	m	class:CBlobProperties
m_perimeter	.\src\3rdparty\cvblobs\blob.h	/^	double m_perimeter;$/;"	m	class:CBlob
m_printResults	.\src\opentld\main\Settings.h	/^    std::string m_printResults; \/\/!< path to the file were the results should be printed; NULL -> results will not be printed$/;"	m	class:tld::Settings
m_printResultsSet	.\src\opentld\main\Config.h	/^    bool m_printResultsSet;$/;"	m	class:tld::Config
m_printTiming	.\src\opentld\main\Settings.h	/^    std::string m_printTiming; \/\/!< path to the file were the timings should be printed; NULL -> results will not be printed$/;"	m	class:tld::Settings
m_proportionalShift	.\src\opentld\main\Settings.h	/^    float m_proportionalShift; \/\/!< proportional shift$/;"	m	class:tld::Settings
m_q	.\src\3rdparty\cvblobs\BlobOperators.h	/^	int m_p, m_q;$/;"	m	class:CBlobGetMoment
m_saveOutput	.\src\opentld\main\Settings.h	/^    bool m_saveOutput; \/\/!< specifies whether to save visual output$/;"	m	class:tld::Settings
m_seed	.\src\opentld\main\Settings.h	/^    int m_seed;$/;"	m	class:tld::Settings
m_selectManually	.\src\opentld\main\Settings.h	/^    bool m_selectManually; \/\/!< if true, user can select initial bounding box (which then overrides the setting "initialBoundingBox")$/;"	m	class:tld::Settings
m_selectManuallySet	.\src\opentld\main\Config.h	/^    bool m_selectManuallySet;$/;"	m	class:tld::Config
m_settings	.\src\opentld\main\Config.h	/^    Settings m_settings; \/\/!< adjusted settings$/;"	m	class:tld::Config
m_settings	.\src\opentld\qopentld\ConfigDialog.h	/^    tld::Settings *m_settings;$/;"	m	class:ConfigDialog
m_showColorImage	.\src\opentld\main\Settings.h	/^    bool m_showColorImage; \/\/!< shows color images instead of greyscale$/;"	m	class:tld::Settings
m_showDetections	.\src\opentld\main\Settings.h	/^    bool m_showDetections; \/\/!< shows detections$/;"	m	class:tld::Settings
m_showDetectionsSet	.\src\opentld\main\Config.h	/^    bool m_showDetectionsSet;$/;"	m	class:tld::Config
m_showForeground	.\src\opentld\main\Settings.h	/^    bool m_showForeground; \/\/!< shows foreground$/;"	m	class:tld::Settings
m_showForegroundSet	.\src\opentld\main\Config.h	/^    bool m_showForegroundSet;$/;"	m	class:tld::Config
m_showNotConfident	.\src\opentld\main\Settings.h	/^    bool m_showNotConfident; \/\/!< show bounding box also if confidence is low$/;"	m	class:tld::Settings
m_showOutput	.\src\opentld\main\Settings.h	/^    bool m_showOutput; \/\/!< creates a window displaying results$/;"	m	class:tld::Settings
m_showOutputSet	.\src\opentld\main\Config.h	/^    bool m_showOutputSet;$/;"	m	class:tld::Config
m_startFrame	.\src\opentld\main\Settings.h	/^    int m_startFrame; \/\/!< first frame of capturing$/;"	m	class:tld::Settings
m_startFrameSet	.\src\opentld\main\Config.h	/^    bool m_startFrameSet;$/;"	m	class:tld::Config
m_startPoint	.\src\3rdparty\cvblobs\BlobContour.h	/^	CvPoint m_startPoint;$/;"	m	class:CBlobContour
m_stdDevGray	.\src\3rdparty\cvblobs\blob.h	/^	double m_stdDevGray;$/;"	m	class:CBlob
m_storage	.\src\3rdparty\cvblobs\BlobProperties.h	/^	CvMemStorage *m_storage;$/;"	m	class:CBlobProperties
m_storage	.\src\3rdparty\cvblobs\blob.h	/^	CvMemStorage *m_storage;$/;"	m	class:CBlob
m_thetaN	.\src\opentld\main\Settings.h	/^    float m_thetaN;$/;"	m	class:tld::Settings
m_thetaP	.\src\opentld\main\Settings.h	/^    float m_thetaP;$/;"	m	class:tld::Settings
m_thetaSet	.\src\opentld\main\Config.h	/^    bool m_thetaSet;$/;"	m	class:tld::Config
m_threshold	.\src\opentld\main\Settings.h	/^    float m_threshold; \/\/!< threshold for determining positive results$/;"	m	class:tld::Settings
m_track_colors	.\src\opentld\main\Trajectory.h	/^	std::vector<CvScalar> m_track_colors; \/\/\/< vector containing the colors of the points$/;"	m	class:tld::Trajectory
m_track_positions	.\src\opentld\main\Trajectory.h	/^	std::vector<CvPoint> m_track_positions; \/\/\/< vector containing the locations of the points$/;"	m	class:tld::Trajectory
m_trackerEnabled	.\src\opentld\main\Settings.h	/^    bool m_trackerEnabled;$/;"	m	class:tld::Settings
m_trajectory	.\src\opentld\main\Settings.h	/^    int m_trajectory; \/\/!< specifies the number of the last frames which are considered by the trajectory; 0 disables the trajectory$/;"	m	class:tld::Settings
m_trajectorySet	.\src\opentld\main\Config.h	/^    bool m_trajectorySet;$/;"	m	class:tld::Config
m_useProportionalShift	.\src\opentld\main\Settings.h	/^    bool m_useProportionalShift; \/\/!< sets scanwindows off by a percentage value of the window dimensions (specified in proportionalShift) rather than 1px.$/;"	m	class:tld::Settings
m_varianceFilterEnabled	.\src\opentld\main\Settings.h	/^    bool m_varianceFilterEnabled;$/;"	m	class:tld::Settings
m_window_name	.\src\opentld\main\Gui.h	/^    std::string m_window_name;$/;"	m	class:tld::Gui
m_x	.\src\3rdparty\cvblobs\BlobOperators.h	/^	double m_x, m_y;$/;"	m	class:CBlobGetDistanceFromPoint
m_xBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool  m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExternHullPerimeterRatio
m_xBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool  m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExternPerimeterRatio
m_xBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExterior
m_xBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExternPerimeter
m_y	.\src\3rdparty\cvblobs\BlobOperators.h	/^	double m_x, m_y;$/;"	m	class:CBlobGetDistanceFromPoint
m_yBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool  m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExternHullPerimeterRatio
m_yBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool  m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExternPerimeterRatio
m_yBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExterior
m_yBorder	.\src\3rdparty\cvblobs\BlobOperators.h	/^	bool m_xBorder, m_yBorder;$/;"	m	class:CBlobGetExternPerimeter
main	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^void main() {}$/;"	f
main	.\CMakeFiles\feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	.\CMakeFiles\feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	.\src\opentld\OpenTLD.cpp	/^int main(int argc, char **argv)$/;"	f
main	.\src\opentld\QOpenTLD.cpp	/^int main(int argc, char **argv)$/;"	f
maxScale	.\src\libopentld\tld\IDetectorCascade.h	/^    int maxScale;$/;"	m	class:tld::IDetectorCascade
medianFlowTracker	.\src\libopentld\tld\TLD.h	/^    MedianFlowTracker *medianFlowTracker;$/;"	m	class:tld::TLD
memType	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType memType() const {return this->_memtype;}$/;"	f	class:NCVMatrix
memType	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType memType() const {return this->_memtype;}$/;"	f	class:NCVVector
memtype	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NCVMemoryType memtype;$/;"	m	struct:NCVMemPtr
method	.\src\libopentld\imacq\ImAcq.h	/^    int method;$/;"	m	struct:__anon3
minBlobSize	.\src\libopentld\tld\detector\ForegroundDetector.h	/^    int minBlobSize;$/;"	m	class:tld::ForegroundDetector
minScale	.\src\libopentld\tld\IDetectorCascade.h	/^    int minScale;$/;"	m	class:tld::IDetectorCascade
minSize	.\src\libopentld\tld\IDetectorCascade.h	/^    int minSize;$/;"	m	class:tld::IDetectorCascade
minVar	.\src\libopentld\tld\IVarianceFilter.h	/^    float minVar;$/;"	m	class:tld::IVarianceFilter
modelExportFile	.\src\opentld\main\Main.h	/^    const char *modelExportFile;$/;"	m	class:Main
modelPath	.\src\opentld\main\Main.h	/^    const char *modelPath;$/;"	m	class:Main
mouseHandler	.\src\opentld\main\Gui.cpp	/^static void mouseHandler(int event, int x, int y, int flags, void *param)$/;"	f	namespace:tld
nStep	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32u nStep;         \/\/\/< pitch$/;"	m	struct:NppStInterpolationState
name	.\src\3rdparty\libconfig\libconfig.h	/^  char *name;$/;"	m	struct:config_setting_t
name	.\src\3rdparty\libconfig\parsectx.h	/^  char *name;$/;"	m	struct:parse_context
ncc	.\src\libopentld\tld\detector\NNClassifier.cpp	/^float NNClassifier::ncc(float *f1, float *f2)$/;"	f	class:tld::NNClassifier
ncvAssertCUDALastErrorReturn	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	296;"	d
ncvAssertCUDAReturn	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	288;"	d
ncvAssertPrintCheck	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	256;"	d
ncvAssertPrintReturn	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	268;"	d
ncvAssertReturn	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	276;"	d
ncvAssertReturnNcvStat	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	280;"	d
ncvSafeMatAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	1020;"	d
negatives	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int *negatives;$/;"	m	class:tld::IEnsembleClassifier
nextIteration	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::nextIteration(const Mat &img)$/;"	f	class:tld::EnsembleClassifier
nextIteration	.\src\libopentld\tld\detector\ForegroundDetector.cpp	/^void ForegroundDetector::nextIteration(const Mat &img)$/;"	f	class:tld::ForegroundDetector
nextIteration	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^void VarianceFilter::nextIteration(const Mat &img)$/;"	f	class:tld::VarianceFilter
nnClassifier	.\src\libopentld\tld\IDetectorCascade.h	/^    INNClassifier *nnClassifier;$/;"	m	class:tld::IDetectorCascade
nnClassifier	.\src\libopentld\tld\TLD.h	/^    INNClassifier *nnClassifier;$/;"	m	class:tld::TLD
normCrossCorrelation	.\src\libopentld\mftracker\Lk.cpp	/^void normCrossCorrelation(IplImage *imgI, IplImage *imgJ,$/;"	f
nppStBicubic	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    nppStBicubic      \/\/\/< Bicubic convolution filter, a = -0.5 (cubic Hermite spline)$/;"	e	enum:NppStInterpMode
nppStBorderClamp	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    nppStBorderClamp  = 1, \/\/\/< Clamp out of range position to borders$/;"	e	enum:NppStBorderType
nppStBorderMirror	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    nppStBorderMirror = 3  \/\/\/< reflect out of range position across borders$/;"	e	enum:NppStBorderType
nppStBorderNone	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    nppStBorderNone   = 0, \/\/\/< There is no need to define additional pixels, image is extended already$/;"	e	enum:NppStBorderType
nppStBorderWrap	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    nppStBorderWrap   = 2, \/\/\/< Wrap out of range position. Image becomes periodic.$/;"	e	enum:NppStBorderType
nppStSupersample	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    nppStSupersample, \/\/\/< Supersampling. For downscaling only$/;"	e	enum:NppStInterpMode
numClusters	.\src\libopentld\tld\DetectionResult.h	/^    int numClusters;$/;"	m	class:tld::DetectionResult
numFeatures	.\src\libopentld\tld\IDetectorCascade.h	/^    int numFeatures;$/;"	m	class:tld::IDetectorCascade
numFeatures	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int numFeatures;$/;"	m	class:tld::IEnsembleClassifier
numIndices	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int numIndices;$/;"	m	class:tld::IEnsembleClassifier
numScales	.\src\libopentld\tld\IDetectorCascade.h	/^    int numScales;$/;"	m	class:tld::IDetectorCascade
numScales	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int numScales;$/;"	m	class:tld::IEnsembleClassifier
numTrees	.\src\libopentld\tld\IDetectorCascade.h	/^    int numTrees;$/;"	m	class:tld::IDetectorCascade
numTrees	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int numTrees;$/;"	m	class:tld::IEnsembleClassifier
numWindows	.\src\libopentld\tld\Clustering.h	/^    int numWindows;$/;"	m	class:tld::Clustering
numWindows	.\src\libopentld\tld\IDetectorCascade.h	/^    int numWindows;$/;"	m	class:tld::IDetectorCascade
numWindows	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^    int numWindows;$/;"	m	class:tld::cuda::CuEnsembleClassifier
num_filenames	.\src\3rdparty\libconfig\libconfig.h	/^  unsigned int num_filenames;$/;"	m	struct:config_t
num_filenames	.\src\3rdparty\libconfig\scanctx.h	/^  unsigned int num_filenames;$/;"	m	struct:scan_context
objHeight	.\src\libopentld\tld\IDetectorCascade.h	/^    int objHeight;								$/;"	m	class:tld::IDetectorCascade
objWidth	.\src\libopentld\tld\IDetectorCascade.h	/^    int objWidth;								$/;"	m	class:tld::IDetectorCascade
on_buttonBox_accepted	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_buttonBox_accepted()$/;"	f	class:ConfigDialog
on_buttonBox_rejected	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_buttonBox_rejected()$/;"	f	class:ConfigDialog
on_comboBox_method_activated	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_comboBox_method_activated(QString element)$/;"	f	class:ConfigDialog
on_pushButton_imagePath_clicked	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_pushButton_imagePath_clicked()$/;"	f	class:ConfigDialog
on_pushButton_modelPath_clicked	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_pushButton_modelPath_clicked()$/;"	f	class:ConfigDialog
on_pushButton_outputDir_clicked	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_pushButton_outputDir_clicked()$/;"	f	class:ConfigDialog
on_pushButton_printResults_clicked	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_pushButton_printResults_clicked()$/;"	f	class:ConfigDialog
on_pushButton_printTiming_clicked	.\src\opentld\qopentld\ConfigDialog.cpp	/^void ConfigDialog::on_pushButton_printTiming_clicked()$/;"	f	class:ConfigDialog
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetBreadth::operator()(CBlob &blob)$/;"	f	class:CBlobGetBreadth
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetCompactness::operator()(CBlob &blob)$/;"	f	class:CBlobGetCompactness
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetDistanceFromPoint::operator()(CBlob &blob)$/;"	f	class:CBlobGetDistanceFromPoint
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetElongation::operator()(CBlob &blob)$/;"	f	class:CBlobGetElongation
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetHullArea::operator()(CBlob &blob)$/;"	f	class:CBlobGetHullArea
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetHullPerimeter::operator()(CBlob &blob)$/;"	f	class:CBlobGetHullPerimeter
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetLength::operator()(CBlob &blob)$/;"	f	class:CBlobGetLength
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetMaxXatMaxY::operator()(CBlob &blob)$/;"	f	class:CBlobGetMaxXatMaxY
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetMaxYatMinX::operator()(CBlob &blob)$/;"	f	class:CBlobGetMaxYatMinX
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetMinXatMinY::operator()(CBlob &blob)$/;"	f	class:CBlobGetMinXatMinY
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetMinYatMaxX::operator()(CBlob &blob)$/;"	f	class:CBlobGetMinYatMaxX
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetMoment::operator()(CBlob &blob)$/;"	f	class:CBlobGetMoment
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetRoughness::operator()(CBlob &blob)$/;"	f	class:CBlobGetRoughness
operator ()	.\src\3rdparty\cvblobs\BlobOperators.cpp	/^double CBlobGetXYInside::operator()(CBlob &blob)$/;"	f	class:CBlobGetXYInside
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^	  bool operator()(const char* s1, const char* s2) const$/;"	f	struct:functorComparacioIdOperador
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetArea
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetAreaElipseRatio
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetAxisRatio
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetDiffX
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetDiffY
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetExterior
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetExternHullPerimeterRatio
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetExternPerimeter
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetExternPerimeterRatio
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetID
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMajorAxisLength
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMaxX
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMaxY
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMean
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMinX
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMinY
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetMinorAxisLength
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetOrientation
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetOrientationCos
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetPerimeter
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetStdDev
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetXCenter
operator ()	.\src\3rdparty\cvblobs\BlobOperators.h	/^    double operator()(CBlob &blob)$/;"	f	class:CBlobGetYCenter
operator ()	.\src\libopentld\tld\detector\cuda\CUDA.h	/^    bool operator()(const int x)$/;"	f	struct:is_negative
operator +	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlobResult CBlobResult::operator+( const CBlobResult& source ) const$/;"	f	class:CBlobResult
operator =	.\src\3rdparty\cvblobs\BlobContour.cpp	/^CBlobContour& CBlobContour::operator=( const CBlobContour &source )$/;"	f	class:CBlobContour
operator =	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlobResult& CBlobResult::operator=(const CBlobResult& source)$/;"	f	class:CBlobResult
operator =	.\src\3rdparty\cvblobs\blob.cpp	/^CBlob& CBlob::operator=(const CBlob &src )$/;"	f	class:CBlob
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(bool value) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(const char *value) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(const double &value) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(const long long &value)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(const std::string &value)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(float value) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(int value) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator=(long value) throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator =	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException &SettingException::operator=(const SettingException &other)$/;"	f	class:libconfig::SettingException
operator ==	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    __host__ __device__ bool operator == (const NcvSize32u &another) const {return this->width == another.width && this->height == another.height;}$/;"	f	struct:NcvSize32u
operator COperadorBlob*	.\src\3rdparty\cvblobs\BlobOperators.h	/^	operator COperadorBlob*()$/;"	f	class:COperadorBlob
operator []	.\src\3rdparty\libconfig\libconfig.h++	/^  inline Setting & operator[](const std::string &key) const$/;"	f	class:libconfig::Setting
operator []	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator[](const char *key) const$/;"	f	class:libconfig::Setting
operator []	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::operator[](int i) const$/;"	f	class:libconfig::Setting
operator bool	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator bool() const throw(SettingTypeException) $/;"	f	class:libconfig::Setting
operator const char *	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator const char *() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator double	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator double() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator float	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator float() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator int	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator int() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator long	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator long() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator long long	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator long long() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator std::string	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator std::string() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator unsigned int	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator unsigned int() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator unsigned long	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator unsigned long() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
operator unsigned long long	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::operator unsigned long long() const throw(SettingTypeException)$/;"	f	class:libconfig::Setting
optarg	.\src\opentld\main\Config.cpp	/^char *optarg;$/;"	m	namespace:tld	file:
opterr	.\src\opentld\main\Config.cpp	/^int opterr = 1;$/;"	m	namespace:tld	file:
optind	.\src\opentld\main\Config.cpp	/^int optind = 1;$/;"	m	namespace:tld	file:
optopt	.\src\opentld\main\Config.cpp	/^int optopt;$/;"	m	namespace:tld	file:
pBU	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pBU;          \/\/\/< backward horizontal displacement$/;"	m	struct:NppStInterpolationState
pBV	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pBV;          \/\/\/< backward vertical displacement$/;"	m	struct:NppStInterpolationState
pFU	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pFU;          \/\/\/< forward horizontal displacement$/;"	m	struct:NppStInterpolationState
pFV	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pFV;          \/\/\/< forward vertical displacement$/;"	m	struct:NppStInterpolationState
pNewFrame	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pNewFrame;    \/\/\/< new frame$/;"	m	struct:NppStInterpolationState
pSrcFrame0	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pSrcFrame0;   \/\/\/< frame 0$/;"	m	struct:NppStInterpolationState
pSrcFrame1	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *pSrcFrame1;   \/\/\/< frame 1$/;"	m	struct:NppStInterpolationState
parent	.\src\3rdparty\libconfig\libconfig.h	/^  struct config_setting_t *parent;$/;"	m	struct:config_setting_t	typeref:struct:config_setting_t::config_setting_t
parent	.\src\3rdparty\libconfig\parsectx.h	/^  config_setting_t *parent;$/;"	m	struct:parse_context
parse_context	.\src\3rdparty\libconfig\parsectx.h	/^struct parse_context$/;"	s
parsectx_append_string	.\src\3rdparty\libconfig\parsectx.h	43;"	d
parsectx_cleanup	.\src\3rdparty\libconfig\parsectx.h	40;"	d
parsectx_init	.\src\3rdparty\libconfig\parsectx.h	38;"	d
parsectx_take_string	.\src\3rdparty\libconfig\parsectx.h	45;"	d
pitch	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u pitch() const {return this->_pitch;}$/;"	f	class:NCVMatrix
point	.\src\opentld\main\Gui.cpp	/^static CvPoint point;$/;"	m	namespace:tld	file:
points	.\src\libopentld\mftracker\Lk.cpp	/^CvPoint2D32f *points[3] = { 0, 0, 0 };$/;"	v
pos	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f pos;           \/\/\/< new frame position$/;"	m	struct:NppStInterpolationState
positive	.\src\libopentld\tld\detector\NormalizedPatch.h	/^    bool positive;$/;"	m	class:tld::NormalizedPatch
positives	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int *positives;$/;"	m	class:tld::IEnsembleClassifier
posteriors	.\src\libopentld\tld\DetectionResult.h	/^    float *posteriors;  \/* Contains the posteriors for each slding window. Is of size numWindows. Allocated by tldInitClassifier. *\/$/;"	m	class:tld::DetectionResult
posteriors	.\src\libopentld\tld\IEnsembleClassifier.h	/^    float *posteriors;$/;"	m	class:tld::IEnsembleClassifier
posteriors_d	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^    float *posteriors_d;$/;"	m	class:tld::cuda::CuEnsembleClassifier
ppBuffers	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    Ncv32f *ppBuffers[6]; \/\/\/< temporary buffers$/;"	m	struct:NppStInterpolationState
predictbb	.\src\libopentld\mftracker\BBPredict.cpp	/^int predictbb(float *bb0, CvPoint2D32f *pt0, CvPoint2D32f *pt1, int nPts,$/;"	f
prevBB	.\src\libopentld\tld\TLD.h	/^    cv::Rect *prevBB;$/;"	m	class:tld::TLD
prevImg	.\src\libopentld\tld\TLD.h	/^    cv::Mat prevImg;$/;"	m	class:tld::TLD
printResults	.\src\opentld\main\Main.h	/^    const char *printResults;$/;"	m	class:Main
processImage	.\src\libopentld\tld\TLD.cpp	/^void TLD::processImage(const Mat &img)$/;"	f	class:tld::TLD
propagateMembers	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::propagateMembers()$/;"	f	class:tld::DetectorCascade
propagateMembers	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::propagateMembers()$/;"	f	class:tld::cuda::CuDetectorCascade
ptr	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    T *ptr() const {return this->_ptr;}$/;"	f	class:NCVMatrix
ptr	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    T *ptr() const {return this->_ptr;}$/;"	f	class:NCVVector
ptr	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    void *ptr;$/;"	m	struct:NCVMemPtr
qnxnto	.\CMakeFiles\3.5.1\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	.\CMakeFiles\3.5.1\CompilerIdC\CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qualifiedWins	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	/^    int * qualifiedWins;$/;"	m	class:tld::cuda::CuDetectorCascade
read	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::read(FILE *stream) throw(ParseException)$/;"	f	class:libconfig::Config
readFile	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::readFile(const char *filename) throw(FileIOException,$/;"	f	class:libconfig::Config
readFromFile	.\src\libopentld\tld\TLD.cpp	/^void TLD::readFromFile(const char *path)$/;"	f	class:tld::TLD
readString	.\src\3rdparty\libconfig\libconfig.h++	/^  inline void readString(const std::string &str) throw(ParseException)$/;"	f	class:libconfig::Config
readString	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::readString(const char *str) throw(ParseException)$/;"	f	class:libconfig::Config
reinit	.\src\opentld\main\Main.h	/^    bool reinit;$/;"	m	class:Main
release	.\src\libopentld\tld\Clustering.cpp	/^void Clustering::release()$/;"	f	class:tld::Clustering
release	.\src\libopentld\tld\DetectionResult.cpp	/^void DetectionResult::release()$/;"	f	class:tld::DetectionResult
release	.\src\libopentld\tld\TLD.cpp	/^void TLD::release()$/;"	f	class:tld::TLD
release	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^void DetectorCascade::release()$/;"	f	class:tld::DetectorCascade
release	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::release()$/;"	f	class:tld::EnsembleClassifier
release	.\src\libopentld\tld\detector\ForegroundDetector.cpp	/^void ForegroundDetector::release()$/;"	f	class:tld::ForegroundDetector
release	.\src\libopentld\tld\detector\NNClassifier.cpp	/^void NNClassifier::release()$/;"	f	class:tld::NNClassifier
release	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^void VarianceFilter::release()$/;"	f	class:tld::VarianceFilter
release	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::release()$/;"	f	class:tld::cuda::CuDetectorCascade
release	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::release()$/;"	f	class:tld::cuda::CuEnsembleClassifier
remove	.\src\3rdparty\libconfig\libconfig.h++	/^  inline void remove(const std::string & name)$/;"	f	class:libconfig::Setting
remove	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Setting::remove(const char *name)$/;"	f	class:libconfig::Setting
remove	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Setting::remove(unsigned int idx)$/;"	f	class:libconfig::Setting
reset	.\src\libopentld\tld\DetectionResult.cpp	/^void DetectionResult::reset()$/;"	f	class:tld::DetectionResult
root	.\src\3rdparty\libconfig\libconfig.h	/^  config_setting_t *root;$/;"	m	struct:config_t
saveDir	.\src\opentld\main\Main.h	/^    const char *saveDir;$/;"	m	class:Main
scales	.\src\libopentld\tld\IDetectorCascade.h	/^    cv::Size *scales;$/;"	m	class:tld::IDetectorCascade
scales	.\src\libopentld\tld\IEnsembleClassifier.h	/^    cv::Size *scales;$/;"	m	class:tld::IEnsembleClassifier
scan_context	.\src\3rdparty\libconfig\scanctx.h	/^struct scan_context$/;"	s
scanctx_append_string	.\src\3rdparty\libconfig\scanctx.h	55;"	d
scanctx_cleanup	.\src\3rdparty\libconfig\scanctx.c	/^const char **scanctx_cleanup(struct scan_context *ctx,$/;"	f
scanctx_current_filename	.\src\3rdparty\libconfig\scanctx.c	/^const char *scanctx_current_filename(struct scan_context *ctx)$/;"	f
scanctx_init	.\src\3rdparty\libconfig\scanctx.c	/^void scanctx_init(struct scan_context *ctx, const char *top_filename)$/;"	f
scanctx_pop_include	.\src\3rdparty\libconfig\scanctx.c	/^void *scanctx_pop_include(struct scan_context *ctx)$/;"	f
scanctx_push_include	.\src\3rdparty\libconfig\scanctx.c	/^FILE *scanctx_push_include(struct scan_context *ctx, void *buffer,$/;"	f
scanctx_take_string	.\src\3rdparty\libconfig\scanctx.c	/^char *scanctx_take_string(struct scan_context *ctx)$/;"	f
seed	.\src\opentld\main\Main.h	/^    int seed;$/;"	m	class:Main
selectManually	.\src\opentld\main\Main.h	/^    bool selectManually;$/;"	m	class:Main
selectObject	.\src\libopentld\tld\TLD.cpp	/^void TLD::selectObject(const Mat &img, Rect *bb)$/;"	f	class:tld::TLD
setAutoConvert	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::setAutoConvert(bool flag)$/;"	f	class:libconfig::Config
setDefaultFormat	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::setDefaultFormat(Setting::Format format)$/;"	f	class:libconfig::Config
setFormat	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Setting::setFormat(Format format) throw()$/;"	f	class:libconfig::Setting
setImgSize	.\src\libopentld\tld\IDetectorCascade.h	/^    virtual void setImgSize(int w, int h, int step) { imgWidth = w; imgHeight = h; imgWidthStep = step; }$/;"	f	class:tld::IDetectorCascade
setImgSize	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^void CuDetectorCascade::setImgSize(int w, int h, int step)$/;"	f	class:tld::cuda::CuDetectorCascade
setImgSize	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^void CuVarianceFilter::setImgSize(int w, int h)$/;"	f	class:tld::cuda::CuVarianceFilter
setIncludeDir	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::setIncludeDir(const char *includeDir) throw()$/;"	f	class:libconfig::Config
setTabWidth	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::setTabWidth(unsigned short width) throw()$/;"	f	class:libconfig::Config
setting	.\src\3rdparty\libconfig\parsectx.h	/^  config_setting_t *setting;$/;"	m	struct:parse_context
shift	.\src\libopentld\tld\IDetectorCascade.h	/^    float shift;$/;"	m	class:tld::IDetectorCascade
short	.\src\3rdparty\libconfig\grammar.c	237;"	d	file:
showForeground	.\src\opentld\main\Main.h	/^    bool showForeground;$/;"	m	class:Main
showImage	.\src\opentld\main\Gui.cpp	/^void Gui::showImage(IplImage *image)$/;"	f	class:tld::Gui
showNotConfident	.\src\opentld\main\Main.h	/^    bool showNotConfident;$/;"	m	class:Main
showOutput	.\src\opentld\main\Main.h	/^    bool showOutput;$/;"	m	class:Main
showTrajectory	.\src\opentld\main\Main.h	/^	bool showTrajectory;$/;"	m	class:Main
size	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    NcvSize32u size() const {return NcvSize32u(this->_width, this->_height);}$/;"	f	class:NCVMatrix
size	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    size_t size;$/;"	m	struct:NCVMemSegment
size	.\src\libopentld\tld\detector\cuda\npp\NPP_staging.hpp	/^    NcvSize32u size;      \/\/\/< frame size$/;"	m	struct:NppStInterpolationState
sizeof	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvPoint2D32u) == 2 * sizeof(Ncv32u));$/;"	v
sizeof	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvRect32s) == 4 * sizeof(Ncv32s));$/;"	v
sizeof	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvRect32u) == 4 * sizeof(Ncv32u));$/;"	v
sizeof	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvRect8u) == sizeof(Ncv32u));$/;"	v
sizeof	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^NCV_CT_ASSERT(sizeof(NcvSize32u) == 2 * sizeof(Ncv32u));$/;"	v
snprintf	.\src\3rdparty\libconfig\wincompat.h	35;"	d
sqrIntegral	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^void CuVarianceFilter::sqrIntegral(const GpuMat &src, GpuMat &sqsum)$/;"	f	class:tld::cuda::CuVarianceFilter
sqrIntegralImg	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	/^    GpuMat sqrIntegralImg;$/;"	m	class:tld::cuda::CuVarianceFilter
startFrame	.\src\libopentld\imacq\ImAcq.h	/^    int startFrame;$/;"	m	struct:__anon3
startTime	.\src\libopentld\imacq\ImAcq.h	/^    double startTime;$/;"	m	struct:__anon3
storeCurrentData	.\src\libopentld\tld\TLD.cpp	/^void TLD::storeCurrentData()$/;"	f	class:tld::TLD
strbuf_append	.\src\3rdparty\libconfig\strbuf.c	/^void strbuf_append(strbuf_t *buf, const char *text)$/;"	f
strbuf_release	.\src\3rdparty\libconfig\strbuf.c	/^char *strbuf_release(strbuf_t *buf)$/;"	f
strbuf_t	.\src\3rdparty\libconfig\strbuf.h	/^} strbuf_t;$/;"	t	typeref:struct:__anon2
streams	.\src\3rdparty\libconfig\scanctx.h	/^  FILE *streams[MAX_INCLUDE_DEPTH];$/;"	m	struct:scan_context
stride	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u stride() const$/;"	f	class:NCVMatrix
string	.\src\3rdparty\libconfig\parsectx.h	/^  strbuf_t string;$/;"	m	struct:parse_context
string	.\src\3rdparty\libconfig\scanctx.h	/^  strbuf_t string;$/;"	m	struct:scan_context
string	.\src\3rdparty\libconfig\strbuf.h	/^  char *string;$/;"	m	struct:__anon2
strtoull	.\src\3rdparty\libconfig\wincompat.h	39;"	d
sub2idx	.\src\libopentld\tld\IDetectorCascade.h	45;"	d
sub2idx	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	43;"	d	file:
sval	.\src\3rdparty\libconfig\grammar.c	/^  char *sval;$/;"	m	union:YYSTYPE	file:
sval	.\src\3rdparty\libconfig\grammar.h	/^  char *sval;$/;"	m	union:YYSTYPE
sval	.\src\3rdparty\libconfig\libconfig.h	/^  char *sval;$/;"	m	union:config_value_t
t_OperadorBlobFactory	.\src\3rdparty\cvblobs\BlobOperators.h	/^	typedef ObjectFactory<COperadorBlob, const char *, functorComparacioIdOperador > t_OperadorBlobFactory;$/;"	t
t_PointList	.\src\3rdparty\cvblobs\BlobContour.h	/^typedef CvSeq* t_PointList;$/;"	t
t_chainCode	.\src\3rdparty\cvblobs\BlobContour.h	/^typedef unsigned char t_chainCode;$/;"	t
t_chainCodeList	.\src\3rdparty\cvblobs\BlobContour.h	/^typedef CvSeq* t_chainCodeList;$/;"	t
t_contourList	.\src\3rdparty\cvblobs\BlobProperties.h	/^	typedef std::list<CBlobContour> t_contourList;$/;"	t	class:CBlobProperties
t_contourList	.\src\3rdparty\cvblobs\blob.h	/^	typedef std::list<CBlobContour> t_contourList;$/;"	t	class:CBlob
t_labelType	.\src\3rdparty\cvblobs\BlobProperties.h	/^typedef unsigned int t_labelType;$/;"	t
t_labelType	.\src\3rdparty\cvblobs\blob.h	/^typedef unsigned int t_labelType;$/;"	t
tab_width	.\src\3rdparty\libconfig\libconfig.h	/^  unsigned short tab_width;$/;"	m	struct:config_t
thetaFP	.\src\libopentld\tld\INNClassifier.h	/^    float thetaFP;$/;"	m	class:tld::INNClassifier
thetaTP	.\src\libopentld\tld\INNClassifier.h	/^    float thetaTP;$/;"	m	class:tld::INNClassifier
threshold	.\src\opentld\main\Main.h	/^    double threshold;$/;"	m	class:Main
tick_t	.\src\libopentld\tld\Timing.h	/^typedef int64 tick_t;$/;"	t
tld	.\src\libopentld\tld\Clustering.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\Clustering.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\DetectionResult.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\DetectionResult.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\IDetectorCascade.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\IEnsembleClassifier.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\INNClassifier.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\IVarianceFilter.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\MedianFlowTracker.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\MedianFlowTracker.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\TLD.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\TLD.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\TLDUtil.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\TLDUtil.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\DetectorCascade.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\EnsembleClassifier.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\ForegroundDetector.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\ForegroundDetector.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\IntegralImage.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\NNClassifier.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\NNClassifier.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\NormalizedPatch.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\VarianceFilter.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^namespace tld$/;"	n
tld	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^namespace tld$/;"	n	file:
tld	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	/^namespace tld$/;"	n
tld	.\src\opentld\main\Config.cpp	/^namespace tld$/;"	n	file:
tld	.\src\opentld\main\Config.h	/^namespace tld$/;"	n
tld	.\src\opentld\main\Gui.cpp	/^namespace tld$/;"	n	file:
tld	.\src\opentld\main\Gui.h	/^namespace tld$/;"	n
tld	.\src\opentld\main\Main.h	/^    tld::TLD *tld;$/;"	m	class:Main
tld	.\src\opentld\main\Settings (copy).cpp	/^namespace tld$/;"	n	file:
tld	.\src\opentld\main\Settings.cpp	/^namespace tld$/;"	n	file:
tld	.\src\opentld\main\Settings.h	/^namespace tld$/;"	n
tld	.\src\opentld\main\Trajectory.cpp	/^namespace tld$/;"	n	file:
tld	.\src\opentld\main\Trajectory.h	/^namespace tld$/;"	n
tld	.\src\opentld\qopentld\ConfigDialog.h	/^namespace tld$/;"	n
tldArrayToRect	.\src\libopentld\tld\TLDUtil.h	/^cv::Rect tldArrayToRect(T *boundary)$/;"	f	namespace:tld
tldBBOverlap	.\src\libopentld\tld\TLDUtil.cpp	/^float tldBBOverlap(int *bb1, int *bb2)$/;"	f	namespace:tld
tldBoundaryToRect	.\src\libopentld\tld\TLDUtil.cpp	/^CvRect tldBoundaryToRect(int *boundary)$/;"	f	namespace:tld
tldBoundingBoxToPoints	.\src\libopentld\tld\TLDUtil.cpp	/^void tldBoundingBoxToPoints(int *bb, CvPoint *p1, CvPoint *p2)$/;"	f	namespace:tld
tldCalcVariance	.\src\libopentld\tld\TLDUtil.cpp	/^float tldCalcVariance(float *value, int n)$/;"	f	namespace:tld
tldConvertBB	.\src\libopentld\tld\TLDUtil.h	/^void tldConvertBB(T1 *src, T2 *dest)$/;"	f	namespace:tld
tldCopyBB	.\src\libopentld\tld\TLDUtil.h	/^void tldCopyBB(T *src, T *dest)$/;"	f	namespace:tld
tldCopyBoundaryToArray	.\src\libopentld\tld\TLDUtil.h	/^void tldCopyBoundaryToArray(T x, T y, T width, T height, T *array)$/;"	f	namespace:tld
tldCopyRect	.\src\libopentld\tld\TLDUtil.cpp	/^Rect *tldCopyRect(Rect *r)$/;"	f	namespace:tld
tldExtractDimsFromArray	.\src\libopentld\tld\TLDUtil.h	/^void tldExtractDimsFromArray(T *boundary, T *x, T *y, T *width, T *height)$/;"	f	namespace:tld
tldExtractNormalizedPatch	.\src\libopentld\tld\TLDUtil.cpp	/^void tldExtractNormalizedPatch(const Mat &img, int x, int y, int w, int h, float *output)$/;"	f	namespace:tld
tldExtractNormalizedPatchBB	.\src\libopentld\tld\TLDUtil.cpp	/^void tldExtractNormalizedPatchBB(const Mat &img, int *boundary, float *output)$/;"	f	namespace:tld
tldExtractNormalizedPatchRect	.\src\libopentld\tld\TLDUtil.cpp	/^void tldExtractNormalizedPatchRect(const Mat &img, Rect *rect, float *output)$/;"	f	namespace:tld
tldExtractSubImage	.\src\libopentld\tld\TLDUtil.cpp	/^void tldExtractSubImage(const Mat &img, Mat &subImage, CvRect rect)$/;"	f	namespace:tld
tldExtractSubImage	.\src\libopentld\tld\TLDUtil.cpp	/^void tldExtractSubImage(const Mat &img, Mat &subImage, int *boundary)$/;"	f	namespace:tld
tldIsInside	.\src\libopentld\tld\TLDUtil.cpp	/^int tldIsInside(int *bb1, int *bb2)$/;"	f	namespace:tld
tldNormalizeImg	.\src\libopentld\tld\TLDUtil.cpp	/^void tldNormalizeImg(const Mat &img, float *output)$/;"	f	namespace:tld
tldOverlap	.\src\libopentld\tld\TLDUtil.cpp	/^void tldOverlap(int *windows, int numWindows, int *boundary, float *overlap)$/;"	f	namespace:tld
tldOverlapOne	.\src\libopentld\tld\TLDUtil.cpp	/^void tldOverlapOne(int *windows, int numWindows, int index, vector<int> * indices, float *overlap)$/;"	f	namespace:tld
tldOverlapRect	.\src\libopentld\tld\TLDUtil.cpp	/^void tldOverlapRect(int *windows, int numWindows, Rect *boundary, float *overlap)$/;"	f	namespace:tld
tldOverlapRectRect	.\src\libopentld\tld\TLDUtil.cpp	/^float tldOverlapRectRect(Rect r1, Rect r2)$/;"	f	namespace:tld
tldRectToArray	.\src\libopentld\tld\TLDUtil.h	/^void tldRectToArray(cv::Rect rect, T *boundary)$/;"	f	namespace:tld
tldRectToPoints	.\src\libopentld\tld\TLDUtil.cpp	/^void tldRectToPoints(Rect rect, CvPoint *p1, CvPoint *p2)$/;"	f	namespace:tld
tldSortByOverlapDesc	.\src\libopentld\tld\TLDUtil.cpp	/^bool tldSortByOverlapDesc(pair<int, float> bb1 , pair<int, float> bb2)$/;"	f	namespace:tld
top_filename	.\src\3rdparty\libconfig\scanctx.h	/^  const char *top_filename;$/;"	m	struct:scan_context
tracer	.\src\3rdparty\cvblobs\ComponentLabeling.cpp	/^CvPoint tracer( IplImage *image, IplImage *maskImage, CvPoint P, bool *visitedPoints,$/;"	f
track	.\src\libopentld\tld\MedianFlowTracker.cpp	/^void MedianFlowTracker::track(const Mat &prevMat, const Mat &currMat, Rect *prevBB)$/;"	f	class:tld::MedianFlowTracker
trackLK	.\src\libopentld\mftracker\Lk.cpp	/^int trackLK(IplImage *imgI, IplImage *imgJ, float ptsI[], int nPtsI,$/;"	f
trackerBB	.\src\libopentld\tld\MedianFlowTracker.h	/^    cv::Rect *trackerBB;$/;"	m	class:tld::MedianFlowTracker
trackerEnabled	.\src\libopentld\tld\TLD.h	/^    bool trackerEnabled;$/;"	m	class:tld::TLD
trajectoryLength	.\src\opentld\main\Main.h	/^	int trajectoryLength;$/;"	m	class:Main
truePositives	.\src\libopentld\tld\INNClassifier.h	/^    std::vector<NormalizedPatch>* truePositives;$/;"	m	class:tld::INNClassifier
type	.\src\3rdparty\libconfig\libconfig.h	/^  short type;$/;"	m	struct:config_setting_t
ui	.\src\opentld\qopentld\ConfigDialog.h	/^    Ui_ConfigDialog *ui;$/;"	m	class:ConfigDialog
unput	.\src\3rdparty\libconfig\scanner.c	215;"	d	file:
updatePosterior	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::updatePosterior(int treeIdx, int idx, int positive, int amount)$/;"	f	class:tld::EnsembleClassifier
updatePosterior	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^void CuEnsembleClassifier::updatePosterior(int treeIdx, int idx, int positive, int amount)$/;"	f	class:tld::cuda::CuEnsembleClassifier
updatePosteriors	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^void EnsembleClassifier::updatePosteriors(int *featureVector, int positive, int amount)$/;"	f	class:tld::EnsembleClassifier
useShift	.\src\libopentld\tld\IDetectorCascade.h	/^    bool useShift;$/;"	m	class:tld::IDetectorCascade
valid	.\src\libopentld\tld\TLD.h	/^    bool valid;$/;"	m	class:tld::TLD
value	.\src\3rdparty\libconfig\libconfig.h	/^  config_value_t value;$/;"	m	struct:config_setting_t
values	.\src\libopentld\tld\detector\NormalizedPatch.h	/^    float values[TLD_PATCH_SIZE *TLD_PATCH_SIZE];$/;"	m	class:tld::NormalizedPatch
varianceFilter	.\src\libopentld\tld\IDetectorCascade.h	/^    IVarianceFilter *varianceFilter;$/;"	m	class:tld::IDetectorCascade
variances	.\src\libopentld\tld\DetectionResult.h	/^    float *variances;$/;"	m	class:tld::DetectionResult
wasValid	.\src\libopentld\tld\TLD.h	/^    bool wasValid;$/;"	m	class:tld::TLD
what	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *FileIOException::what() const throw()$/;"	f	class:libconfig::FileIOException
what	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *ParseException::what() const throw()$/;"	f	class:libconfig::ParseException
what	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *SettingException::what() const throw()$/;"	f	class:libconfig::SettingException
what	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *SettingNameException::what() const throw()$/;"	f	class:libconfig::SettingNameException
what	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *SettingNotFoundException::what() const throw()$/;"	f	class:libconfig::SettingNotFoundException
what	.\src\3rdparty\libconfig\libconfigcpp.c++	/^const char *SettingTypeException::what() const throw()$/;"	f	class:libconfig::SettingTypeException
width	.\src\libopentld\tld\detector\IntegralImage.h	/^    int width;$/;"	m	class:tld::IntegralImage
width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s width;      \/\/\/< Rectangle width.$/;"	m	struct:NcvRect32s
width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s width;  \/\/\/< Rectangle width.$/;"	m	struct:NcvSize32s
width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u width() const {return this->_width;}$/;"	f	class:NCVMatrix
width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u width;      \/\/\/< Rectangle width.$/;"	m	struct:NcvRect32u
width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u width;  \/\/\/< Rectangle width.$/;"	m	struct:NcvSize32u
width	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u width;$/;"	m	struct:NcvRect8u
win_size_lk	.\src\libopentld\mftracker\Lk.cpp	/^int win_size_lk = 4;$/;"	v
windowName	.\src\opentld\main\Gui.cpp	/^std::string Gui::windowName()$/;"	f	class:tld::Gui
windowOffsets	.\src\libopentld\tld\IDetectorCascade.h	/^    int *windowOffsets;$/;"	m	class:tld::IDetectorCascade
windowOffsets	.\src\libopentld\tld\IEnsembleClassifier.h	/^    int *windowOffsets;$/;"	m	class:tld::IEnsembleClassifier
windowOffsets	.\src\libopentld\tld\IVarianceFilter.h	/^    int *windowOffsets;$/;"	m	class:tld::IVarianceFilter
window_name	.\src\opentld\main\Gui.cpp	/^static string window_name;$/;"	m	namespace:tld	file:
windows	.\src\libopentld\tld\Clustering.h	/^    int *windows;$/;"	m	class:tld::Clustering
windows	.\src\libopentld\tld\IDetectorCascade.h	/^    int *windows;$/;"	m	class:tld::IDetectorCascade
windows	.\src\libopentld\tld\INNClassifier.h	/^    int *windows;$/;"	m	class:tld::INNClassifier
windows_d	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.h	/^    int *windows_d;$/;"	m	class:tld::cuda::CuDetectorCascade
windows_d	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.h	/^    int *windows_d;$/;"	m	class:tld::cuda::CuEnsembleClassifier
windows_d	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.h	/^    int *windows_d;$/;"	m	class:tld::cuda::CuVarianceFilter
wrapSetting	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting & Setting::wrapSetting(config_setting_t *s)$/;"	f	class:libconfig::Setting
write	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::write(FILE *stream) const$/;"	f	class:libconfig::Config
writeFile	.\src\3rdparty\libconfig\libconfigcpp.c++	/^void Config::writeFile(const char *filename) throw(FileIOException)$/;"	f	class:libconfig::Config
writeToFile	.\src\libopentld\tld\TLD.cpp	/^void TLD::writeToFile(const char *path)$/;"	f	class:tld::TLD
x	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s x;          \/\/\/< x-coordinate of upper left corner.$/;"	m	struct:NcvRect32s
x	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s x; \/\/\/< Point X.$/;"	m	struct:NcvPoint2D32s
x	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u x;          \/\/\/< x-coordinate of upper left corner.$/;"	m	struct:NcvRect32u
x	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u x; \/\/\/< Point X.$/;"	m	struct:NcvPoint2D32u
x	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u x;$/;"	m	struct:NcvRect8u
y	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s y;          \/\/\/< y-coordinate of upper left corner.$/;"	m	struct:NcvRect32s
y	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32s y; \/\/\/< Point Y.$/;"	m	struct:NcvPoint2D32s
y	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u y;          \/\/\/< y-coordinate of upper left corner.$/;"	m	struct:NcvRect32u
y	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv32u y; \/\/\/< Point Y.$/;"	m	struct:NcvPoint2D32u
y	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    Ncv8u y;$/;"	m	struct:NcvRect8u
yy_accept	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int16_t yy_accept[103] =$/;"	v	file:
yy_at_bol	.\src\3rdparty\libconfig\scanner.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_at_bol	.\src\3rdparty\libconfig\scanner.h	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state
yy_base	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int16_t yy_base[113] =$/;"	v	file:
yy_bs_column	.\src\3rdparty\libconfig\scanner.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_column	.\src\3rdparty\libconfig\scanner.h	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state
yy_bs_lineno	.\src\3rdparty\libconfig\scanner.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	.\src\3rdparty\libconfig\scanner.h	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state
yy_buf_pos	.\src\3rdparty\libconfig\scanner.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	.\src\3rdparty\libconfig\scanner.h	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state
yy_buf_size	.\src\3rdparty\libconfig\scanner.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	.\src\3rdparty\libconfig\scanner.h	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state
yy_buffer_stack	.\src\3rdparty\libconfig\scanner.c	/^    YY_BUFFER_STATE * yy_buffer_stack; \/**< Stack as an array. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_max	.\src\3rdparty\libconfig\scanner.c	/^    size_t yy_buffer_stack_max; \/**< capacity of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_top	.\src\3rdparty\libconfig\scanner.c	/^    size_t yy_buffer_stack_top; \/**< index of top of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_state	.\src\3rdparty\libconfig\scanner.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_state	.\src\3rdparty\libconfig\scanner.h	/^struct yy_buffer_state$/;"	s
yy_buffer_status	.\src\3rdparty\libconfig\scanner.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_status	.\src\3rdparty\libconfig\scanner.h	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state
yy_c_buf_p	.\src\3rdparty\libconfig\scanner.c	/^    char *yy_c_buf_p;$/;"	m	struct:yyguts_t	file:
yy_ch_buf	.\src\3rdparty\libconfig\scanner.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	.\src\3rdparty\libconfig\scanner.h	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state
yy_chk	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int16_t yy_chk[253] =$/;"	v	file:
yy_def	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int16_t yy_def[113] =$/;"	v	file:
yy_did_buffer_switch_on_eof	.\src\3rdparty\libconfig\scanner.c	/^    int yy_did_buffer_switch_on_eof;$/;"	m	struct:yyguts_t	file:
yy_ec	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	.\src\3rdparty\libconfig\scanner.c	/^static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)$/;"	f	file:
yy_fill_buffer	.\src\3rdparty\libconfig\scanner.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_fill_buffer	.\src\3rdparty\libconfig\scanner.h	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state
yy_flex_debug	.\src\3rdparty\libconfig\scanner.c	137;"	d	file:
yy_flex_debug	.\src\3rdparty\libconfig\scanner.h	129;"	d
yy_flex_debug_r	.\src\3rdparty\libconfig\scanner.c	/^    int yy_flex_debug_r;$/;"	m	struct:yyguts_t	file:
yy_flex_strlen	.\src\3rdparty\libconfig\scanner.c	/^static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)$/;"	f	file:
yy_flex_strncpy	.\src\3rdparty\libconfig\scanner.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)$/;"	f	file:
yy_get_next_buffer	.\src\3rdparty\libconfig\scanner.c	/^static int yy_get_next_buffer (yyscan_t yyscanner)$/;"	f	file:
yy_get_previous_state	.\src\3rdparty\libconfig\scanner.c	/^    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)$/;"	f	file:
yy_hold_char	.\src\3rdparty\libconfig\scanner.c	/^    char yy_hold_char;$/;"	m	struct:yyguts_t	file:
yy_init	.\src\3rdparty\libconfig\scanner.c	/^    int yy_init;$/;"	m	struct:yyguts_t	file:
yy_init_globals	.\src\3rdparty\libconfig\scanner.c	/^static int yy_init_globals (yyscan_t yyscanner)$/;"	f	file:
yy_input_file	.\src\3rdparty\libconfig\scanner.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_input_file	.\src\3rdparty\libconfig\scanner.h	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state
yy_is_interactive	.\src\3rdparty\libconfig\scanner.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	.\src\3rdparty\libconfig\scanner.h	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state
yy_is_our_buffer	.\src\3rdparty\libconfig\scanner.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	.\src\3rdparty\libconfig\scanner.h	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state
yy_last_accepting_cpos	.\src\3rdparty\libconfig\scanner.c	/^    char* yy_last_accepting_cpos;$/;"	m	struct:yyguts_t	file:
yy_last_accepting_state	.\src\3rdparty\libconfig\scanner.c	/^    yy_state_type yy_last_accepting_state;$/;"	m	struct:yyguts_t	file:
yy_meta	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int32_t yy_meta[49] =$/;"	v	file:
yy_more_flag	.\src\3rdparty\libconfig\scanner.c	/^    int yy_more_flag;$/;"	m	struct:yyguts_t	file:
yy_more_len	.\src\3rdparty\libconfig\scanner.c	/^    int yy_more_len;$/;"	m	struct:yyguts_t	file:
yy_n_chars	.\src\3rdparty\libconfig\scanner.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	.\src\3rdparty\libconfig\scanner.c	/^    int yy_n_chars;$/;"	m	struct:yyguts_t	file:
yy_n_chars	.\src\3rdparty\libconfig\scanner.h	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state
yy_new_buffer	.\src\3rdparty\libconfig\scanner.c	324;"	d	file:
yy_new_buffer	.\src\3rdparty\libconfig\scanner.h	313;"	d
yy_nxt	.\src\3rdparty\libconfig\scanner.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int16_t yy_nxt[253] =$/;"	v	file:
yy_reduce_print	.\src\3rdparty\libconfig\grammar.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule, void *scanner, struct parse_context *ctx, struct scan_context *scan_ctx)$/;"	f	file:
yy_rule_can_match_eol	.\src\3rdparty\libconfig\scanner.c	/^static yyconst flex_int32_t yy_rule_can_match_eol[42] =$/;"	v	file:
yy_set_bol	.\src\3rdparty\libconfig\scanner.c	336;"	d	file:
yy_set_bol	.\src\3rdparty\libconfig\scanner.h	312;"	d
yy_set_interactive	.\src\3rdparty\libconfig\scanner.c	326;"	d	file:
yy_set_interactive	.\src\3rdparty\libconfig\scanner.h	314;"	d
yy_size_t	.\src\3rdparty\libconfig\scanner.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_size_t	.\src\3rdparty\libconfig\scanner.h	/^typedef unsigned int yy_size_t;$/;"	t
yy_stack_print	.\src\3rdparty\libconfig\grammar.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	.\src\3rdparty\libconfig\scanner.c	/^    int yy_start;$/;"	m	struct:yyguts_t	file:
yy_start_stack	.\src\3rdparty\libconfig\scanner.c	/^    int *yy_start_stack;$/;"	m	struct:yyguts_t	file:
yy_start_stack_depth	.\src\3rdparty\libconfig\scanner.c	/^    int yy_start_stack_depth;$/;"	m	struct:yyguts_t	file:
yy_start_stack_ptr	.\src\3rdparty\libconfig\scanner.c	/^    int yy_start_stack_ptr;$/;"	m	struct:yyguts_t	file:
yy_state_type	.\src\3rdparty\libconfig\scanner.c	/^typedef int yy_state_type;$/;"	t	file:
yy_symbol_print	.\src\3rdparty\libconfig\grammar.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *scanner, struct parse_context *ctx, struct scan_context *scan_ctx)$/;"	f	file:
yy_symbol_value_print	.\src\3rdparty\libconfig\grammar.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void *scanner, struct parse_context *ctx, struct scan_context *scan_ctx)$/;"	f	file:
yy_trans_info	.\src\3rdparty\libconfig\scanner.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	.\src\3rdparty\libconfig\scanner.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)$/;"	f	file:
yy_verify	.\src\3rdparty\libconfig\scanner.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	.\src\3rdparty\libconfig\grammar.c	/^union yyalloc$/;"	u	file:
yychar	.\src\3rdparty\libconfig\grammar.c	71;"	d	file:
yycheck	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yyclearin	.\src\3rdparty\libconfig\grammar.c	652;"	d	file:
yycolumn	.\src\3rdparty\libconfig\scanner.c	136;"	d	file:
yycolumn	.\src\3rdparty\libconfig\scanner.h	128;"	d
yyconst	.\src\3rdparty\libconfig\scanner.c	107;"	d	file:
yyconst	.\src\3rdparty\libconfig\scanner.c	109;"	d	file:
yyconst	.\src\3rdparty\libconfig\scanner.h	109;"	d
yyconst	.\src\3rdparty\libconfig\scanner.h	111;"	d
yydebug	.\src\3rdparty\libconfig\grammar.c	/^int yydebug;$/;"	v
yydebug	.\src\3rdparty\libconfig\grammar.c	72;"	d	file:
yydefact	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	.\src\3rdparty\libconfig\grammar.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *scanner, struct parse_context *ctx, struct scan_context *scan_ctx)$/;"	f	file:
yyerrok	.\src\3rdparty\libconfig\grammar.c	651;"	d	file:
yyerror	.\src\3rdparty\libconfig\grammar.c	69;"	d	file:
yyextra	.\src\3rdparty\libconfig\scanner.c	132;"	d	file:
yyextra	.\src\3rdparty\libconfig\scanner.h	124;"	d
yyextra_r	.\src\3rdparty\libconfig\scanner.c	/^    YY_EXTRA_TYPE yyextra_r;$/;"	m	struct:yyguts_t	file:
yyguts_t	.\src\3rdparty\libconfig\scanner.c	/^struct yyguts_t$/;"	s	file:
yyin	.\src\3rdparty\libconfig\scanner.c	130;"	d	file:
yyin	.\src\3rdparty\libconfig\scanner.h	122;"	d
yyin_r	.\src\3rdparty\libconfig\scanner.c	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yyinput	.\src\3rdparty\libconfig\scanner.c	/^    static int yyinput (yyscan_t yyscanner)$/;"	f	file:
yyleng	.\src\3rdparty\libconfig\scanner.c	133;"	d	file:
yyleng	.\src\3rdparty\libconfig\scanner.h	125;"	d
yyleng_r	.\src\3rdparty\libconfig\scanner.c	/^    int yyleng_r;$/;"	m	struct:yyguts_t	file:
yyless	.\src\3rdparty\libconfig\scanner.c	2014;"	d	file:
yyless	.\src\3rdparty\libconfig\scanner.c	2015;"	d	file:
yyless	.\src\3rdparty\libconfig\scanner.c	202;"	d	file:
yylex	.\src\3rdparty\libconfig\grammar.c	68;"	d	file:
yylineno	.\src\3rdparty\libconfig\scanner.c	135;"	d	file:
yylineno	.\src\3rdparty\libconfig\scanner.h	127;"	d
yylineno_r	.\src\3rdparty\libconfig\scanner.c	/^    int yylineno_r;$/;"	m	struct:yyguts_t	file:
yylval	.\src\3rdparty\libconfig\grammar.c	70;"	d	file:
yylval	.\src\3rdparty\libconfig\scanner.c	682;"	d	file:
yylval_r	.\src\3rdparty\libconfig\scanner.c	/^    YYSTYPE * yylval_r;$/;"	m	struct:yyguts_t	file:
yymore	.\src\3rdparty\libconfig\scanner.c	547;"	d	file:
yynerrs	.\src\3rdparty\libconfig\grammar.c	73;"	d	file:
yyout	.\src\3rdparty\libconfig\scanner.c	131;"	d	file:
yyout	.\src\3rdparty\libconfig\scanner.h	123;"	d
yyout_r	.\src\3rdparty\libconfig\scanner.c	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yypact	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_int8 yypact[] =$/;"	v	file:
yyparse	.\src\3rdparty\libconfig\grammar.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yyparse	.\src\3rdparty\libconfig\grammar.c	67;"	d	file:
yypgoto	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yyprhs	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yyr1	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrhs	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyscan_t	.\src\3rdparty\libconfig\scanner.c	/^typedef void* yyscan_t;$/;"	t	file:
yyscan_t	.\src\3rdparty\libconfig\scanner.h	/^typedef void* yyscan_t;$/;"	t
yyss_alloc	.\src\3rdparty\libconfig\grammar.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	.\src\3rdparty\libconfig\grammar.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	.\src\3rdparty\libconfig\grammar.c	962;"	d	file:
yystrlen	.\src\3rdparty\libconfig\grammar.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	.\src\3rdparty\libconfig\grammar.c	939;"	d	file:
yystype	.\src\3rdparty\libconfig\grammar.c	225;"	d	file:
yystype	.\src\3rdparty\libconfig\grammar.h	107;"	d
yysyntax_error	.\src\3rdparty\libconfig\grammar.c	/^yysyntax_error (char *yyresult, int yystate, int yychar)$/;"	f	file:
yytable	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yyterminate	.\src\3rdparty\libconfig\scanner.c	810;"	d	file:
yytext	.\src\3rdparty\libconfig\scanner.c	134;"	d	file:
yytext	.\src\3rdparty\libconfig\scanner.h	126;"	d
yytext_ptr	.\src\3rdparty\libconfig\scanner.c	355;"	d	file:
yytext_ptr	.\src\3rdparty\libconfig\scanner.h	218;"	d
yytext_r	.\src\3rdparty\libconfig\scanner.c	/^    char *yytext_r;$/;"	m	struct:yyguts_t	file:
yytname	.\src\3rdparty\libconfig\grammar.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	.\src\3rdparty\libconfig\grammar.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	.\src\3rdparty\libconfig\grammar.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	.\src\3rdparty\libconfig\grammar.h	/^   enum yytokentype {$/;"	g
yytoknum	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	.\src\3rdparty\libconfig\grammar.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	.\src\3rdparty\libconfig\grammar.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	.\src\3rdparty\libconfig\grammar.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	.\src\3rdparty\libconfig\grammar.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	.\src\3rdparty\libconfig\grammar.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	.\src\3rdparty\libconfig\grammar.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	.\src\3rdparty\libconfig\grammar.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	.\src\3rdparty\libconfig\grammar.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	.\src\3rdparty\libconfig\grammar.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	.\src\3rdparty\libconfig\grammar.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyvs_alloc	.\src\3rdparty\libconfig\grammar.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
~CBlob	.\src\3rdparty\cvblobs\blob.cpp	/^CBlob::~CBlob()$/;"	f	class:CBlob
~CBlobContour	.\src\3rdparty\cvblobs\BlobContour.cpp	/^CBlobContour::~CBlobContour()$/;"	f	class:CBlobContour
~CBlobResult	.\src\3rdparty\cvblobs\BlobResult.cpp	/^CBlobResult::~CBlobResult()$/;"	f	class:CBlobResult
~COperadorBlob	.\src\3rdparty\cvblobs\BlobOperators.h	/^	virtual ~COperadorBlob(){};$/;"	f	class:COperadorBlob
~Clustering	.\src\libopentld\tld\Clustering.cpp	/^Clustering::~Clustering()$/;"	f	class:tld::Clustering
~Config	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Config::~Config()$/;"	f	class:libconfig::Config
~Config	.\src\opentld\main\Config.cpp	/^Config::~Config()$/;"	f	class:tld::Config
~ConfigDialog	.\src\opentld\qopentld\ConfigDialog.cpp	/^ConfigDialog::~ConfigDialog()$/;"	f	class:ConfigDialog
~CuDetectorCascade	.\src\libopentld\tld\detector\cuda\CuDetectorCascade.cpp	/^CuDetectorCascade::~CuDetectorCascade()$/;"	f	class:tld::cuda::CuDetectorCascade
~CuEnsembleClassifier	.\src\libopentld\tld\detector\cuda\CuEnsembleClassifier.cpp	/^CuEnsembleClassifier::~CuEnsembleClassifier()$/;"	f	class:tld::cuda::CuEnsembleClassifier
~CuVarianceFilter	.\src\libopentld\tld\detector\cuda\CuVarianceFilter.cpp	/^CuVarianceFilter::~CuVarianceFilter()$/;"	f	class:tld::cuda::CuVarianceFilter
~DetectionResult	.\src\libopentld\tld\DetectionResult.cpp	/^DetectionResult::~DetectionResult()$/;"	f	class:tld::DetectionResult
~DetectorCascade	.\src\libopentld\tld\detector\DetectorCascade.cpp	/^DetectorCascade::~DetectorCascade()$/;"	f	class:tld::DetectorCascade
~EnsembleClassifier	.\src\libopentld\tld\detector\EnsembleClassifier.cpp	/^EnsembleClassifier::~EnsembleClassifier()$/;"	f	class:tld::EnsembleClassifier
~ForegroundDetector	.\src\libopentld\tld\detector\ForegroundDetector.cpp	/^ForegroundDetector::~ForegroundDetector()$/;"	f	class:tld::ForegroundDetector
~Gui	.\src\opentld\main\Gui.cpp	/^Gui::~Gui()$/;"	f	class:tld::Gui
~INCVMemAllocator	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^inline INCVMemAllocator::~INCVMemAllocator() {}$/;"	f	class:INCVMemAllocator
~IVarianceFilter	.\src\libopentld\tld\IVarianceFilter.h	/^    virtual ~IVarianceFilter() { }$/;"	f	class:tld::IVarianceFilter
~IntegralImage	.\src\libopentld\tld\detector\IntegralImage.h	/^    virtual ~IntegralImage()$/;"	f	class:tld::IntegralImage
~Main	.\src\opentld\main\Main.h	/^    ~Main()$/;"	f	class:Main
~MedianFlowTracker	.\src\libopentld\tld\MedianFlowTracker.cpp	/^MedianFlowTracker::~MedianFlowTracker()$/;"	f	class:tld::MedianFlowTracker
~NCVMatrix	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    virtual ~NCVMatrix() {}$/;"	f	class:NCVMatrix
~NCVMatrixAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    ~NCVMatrixAlloc()$/;"	f	class:NCVMatrixAlloc
~NCVVector	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    virtual ~NCVVector() {}$/;"	f	class:NCVVector
~NCVVectorAlloc	.\src\libopentld\tld\detector\cuda\npp\NCV.hpp	/^    ~NCVVectorAlloc()$/;"	f	class:NCVVectorAlloc
~NNClassifier	.\src\libopentld\tld\detector\NNClassifier.cpp	/^NNClassifier::~NNClassifier()$/;"	f	class:tld::NNClassifier
~ParseException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^ParseException::~ParseException() throw()$/;"	f	class:libconfig::ParseException
~Setting	.\src\3rdparty\libconfig\libconfigcpp.c++	/^Setting::~Setting() throw()$/;"	f	class:libconfig::Setting
~SettingException	.\src\3rdparty\libconfig\libconfigcpp.c++	/^SettingException::~SettingException() throw()$/;"	f	class:libconfig::SettingException
~Settings	.\src\opentld\main\Settings (copy).cpp	/^Settings::~Settings()$/;"	f	class:tld::Settings
~Settings	.\src\opentld\main\Settings.cpp	/^Settings::~Settings()$/;"	f	class:tld::Settings
~TLD	.\src\libopentld\tld\TLD.cpp	/^TLD::~TLD()$/;"	f	class:tld::TLD
~Trajectory	.\src\opentld\main\Trajectory.cpp	/^Trajectory::~Trajectory()$/;"	f	class:tld::Trajectory
~VarianceFilter	.\src\libopentld\tld\detector\VarianceFilter.cpp	/^VarianceFilter::~VarianceFilter()$/;"	f	class:tld::VarianceFilter
